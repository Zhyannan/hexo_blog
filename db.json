{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/image/qianyuqianxun.png","path":"image/qianyuqianxun.png","modified":0,"renderable":0},{"_id":"source/image/head_pic.png","path":"image/head_pic.png","modified":0,"renderable":0},{"_id":"source/image/head_myhexo.png","path":"image/head_myhexo.png","modified":0,"renderable":0},{"_id":"source/image/head_hexo1.png","path":"image/head_hexo1.png","modified":0,"renderable":0},{"_id":"source/image/head_hexo2.png","path":"image/head_hexo2.png","modified":0,"renderable":0},{"_id":"source/image/head_hexo3.png","path":"image/head_hexo3.png","modified":0,"renderable":0},{"_id":"source/image/head_hexo4.png","path":"image/head_hexo4.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1520223370521},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1520223370521},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1520223370521},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1520223370523},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1520223370523},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1520223370523},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1520223370523},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1520223370524},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1520223370524},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1520223370524},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1520223370525},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1520223370525},{"_id":"themes/next/_config.yml","hash":"d4771d8f05a75f580694bf44423707abbd3ed558","modified":1520305539144},{"_id":"themes/next/_config.yml.bak","hash":"12a3fc47fdfbaf7e2c10ca70008101685ff553a3","modified":1520305508345},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1520223370526},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1520223370526},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1520223370553},{"_id":"source/_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","hash":"4b1586e77b0cba373436f9a4abbf2ff14ee9fdfc","modified":1519771874000},{"_id":"source/_posts/Hexo-advanced.md","hash":"f7182726052937c863e4a218bd46dbe434564378","modified":1519771874000},{"_id":"source/_posts/ceshi.md","hash":"785298be64b4c937766ecd1471277900c862d369","modified":1520233864611},{"_id":"source/_posts/ceshi.md.bak","hash":"13dc41a720d0a48c69d8fdd9da9e586b4d73c24d","modified":1520233813746},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1520222975901},{"_id":"source/_posts/hexo-3.md","hash":"179bb565eb9d1e748bbdff30e756c59e7326cad9","modified":1519771874000},{"_id":"source/_posts/hexo-4.md","hash":"a43a2b9d1da5b72629df86490d286d03065a76a6","modified":1519771874000},{"_id":"source/categories/index.md","hash":"4b55e192217c1738f5deac584deef9f3d4299c79","modified":1519771874000},{"_id":"source/tags/index.md","hash":"9c32323b2c39d8628153c3852139a311c82852b1","modified":1519771874000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d67b7cbcc31216dec8e0329efb4eed8c0eec4cdb","modified":1520230385484},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520223370503},{"_id":"themes/next/.git/ORIG_HEAD","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1520230385574},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1520223370507},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520223165392},{"_id":"themes/next/.git/index","hash":"a7709377e142e90451561e4a7bfe31faa17701f5","modified":1520223370662},{"_id":"themes/next/.git/packed-refs","hash":"3c8c100ed0e6240e05576839de78b90e0485e0ae","modified":1520223370498},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1520223370522},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1520223370522},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1520223370522},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520223370523},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1520223370526},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1520223370527},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1520223370527},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1520223370527},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1520223370527},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1520223370528},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1520223370528},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1520223370529},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1520223370529},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1520223370529},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1520223370529},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1520223370530},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1520223370530},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1520223370530},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1520223370530},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1520223370531},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1520223370532},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1520223370552},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1520223370552},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1520223370552},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1520223370552},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1520223370553},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1520223370553},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1520223370553},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1520223370554},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1520223370554},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1520223370660},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1520223370661},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1520223370661},{"_id":"source/_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","hash":"1c239092a718a6e4401b3be5c986143df1fcc0f9","modified":1519771874000},{"_id":"source/_posts/Hexo-insert-music-share-comment-tab-search.md","hash":"089ae874a2eacefa3a86c7136cf732d58c616fa8","modified":1519771874000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370591},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520223165392},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520223165392},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"a04bcd7925e722826245dd3085ddbc739ccf12ac","modified":1520223165393},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520223165394},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520223165394},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520223165394},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520223165395},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520223165395},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520223165395},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520223165395},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520223165396},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520223165396},{"_id":"themes/next/.git/logs/HEAD","hash":"211243754720abf4afd85dcd1f0cbcc632bb1792","modified":1520223370504},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520223370531},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520223370531},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1520223370532},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1520223370532},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1520223370532},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1520223370533},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1520223370533},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1520223370533},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1520223370534},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1520223370534},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1520223370535},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1520223370536},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1520223370536},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1520223370536},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1520223370536},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1520223370539},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1520223370539},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1520223370542},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1520223370548},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1520223370548},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1520223370549},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1520223370549},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1520223370549},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1520223370549},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1520223370550},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1520223370555},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1520223370555},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1520223370555},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1520223370556},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1520223370556},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1520223370556},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1520223370557},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1520223370557},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1520223370557},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1520223370590},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1520223370591},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520223370591},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520223370592},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1520223370593},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1520223370594},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1520223370594},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1520223370594},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1520223370595},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1520223370595},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1520223370595},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520223370595},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520223370596},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520223370596},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1520223370596},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520223370597},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1520223370597},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1520223370597},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520223370597},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370540},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370540},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370581},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370581},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370582},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370589},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520223370590},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1520223370504},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1520223370535},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1520223370535},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1520223370537},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1520223370537},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1520223370537},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1520223370537},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1520223370538},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1520223370538},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1520223370538},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1520223370540},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520223370540},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520223370541},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1520223370543},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1520223370543},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1520223370543},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1520223370543},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1520223370544},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1520223370544},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1520223370544},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1520223370544},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1520223370545},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1520223370545},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1520223370545},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1520223370545},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1520223370546},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1520223370546},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1520223370546},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1520223370546},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1520223370547},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1520223370547},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1520223370547},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1520223370547},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1520223370548},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1520223370548},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1520223370550},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1520223370551},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1520223370551},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1520223370551},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1520223370580},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1520223370581},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1520223370581},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1520223370582},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1520223370589},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1520223370589},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1520223370589},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1520223370590},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1520223370598},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1520223370598},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1520223370598},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1520223370599},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1520223370599},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1520223370600},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1520223370600},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1520223370600},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1520223370601},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1520223370601},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1520223370601},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520223370608},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520223370611},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1520223370612},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1520223370612},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1520223370612},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1520223370619},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1520223370619},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1520223370619},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1520223370620},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1520223370621},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1520223370621},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1520223370621},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1520223370623},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1520223370623},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1520223370638},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1520223370639},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1520223370639},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1520223370640},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1520223370640},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1520223370641},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1520223370641},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1520223370642},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1520223370642},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1520223370643},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520223370644},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520223370645},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520223370645},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520223370646},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520223370646},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520223370646},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520223370646},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520223370647},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520223370647},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520223370647},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520223370647},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520223370648},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520223370648},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1520223370648},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1520223370649},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1520223370649},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1520223370649},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1520223370655},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1520223370656},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1520223370659},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1520223370659},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1520223370660},{"_id":"source/uploads/avatar.png","hash":"2b5b7d0d2ecb241c3921600ad98be7478cfe90f4","modified":1520225387415},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1520223370639},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"211243754720abf4afd85dcd1f0cbcc632bb1792","modified":1520223370505},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520223370501},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1520223370550},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1520223370550},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1520223370558},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1520223370558},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1520223370558},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1520223370559},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1520223370559},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1520223370565},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1520223370572},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1520223370578},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1520223370579},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1520223370579},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1520223370579},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1520223370580},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1520223370580},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1520223370580},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1520223370582},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1520223370583},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1520223370583},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1520223370583},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1520223370583},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1520223370584},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520223370584},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1520223370584},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1520223370585},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1520223370585},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1520223370585},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520223370586},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1520223370586},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1520223370587},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1520223370587},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1520223370587},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1520223370588},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1520223370588},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1520223370588},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1520223370601},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1520223370605},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1520223370607},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1520223370607},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520223370613},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520223370613},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520223370613},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520223370615},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520223370615},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520223370615},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1520223370617},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1520223370618},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1520223370618},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1520223370620},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520223370620},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1520223370624},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1520223370624},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1520223370625},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1520223370654},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1520223370654},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1520223370606},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520223370636},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520223370637},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1520223370658},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"211243754720abf4afd85dcd1f0cbcc632bb1792","modified":1520223370501},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1520223370559},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7a36efc16372ae142fb7d2e16043f374a56f9b3c","modified":1521554930852},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1520223370560},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1520223370560},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1520223370560},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1520223370561},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1520223370561},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1520223370561},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1520223370562},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1520223370562},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1520223370562},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1520223370563},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1520223370564},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1520223370564},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1520223370565},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1520223370566},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1520223370566},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1520223370566},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1520223370567},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1520223370567},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1520223370567},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1520223370567},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1520223370567},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1520223370568},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1520223370568},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1520223370568},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1520223370568},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1520223370569},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1520223370569},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1520223370569},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1520223370569},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1520223370570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1520223370570},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1520223370571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1520223370571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1520223370571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1520223370571},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1520223370571},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1520223370572},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1520223370573},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1520223370573},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1520223370573},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1520223370574},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1520223370574},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1520223370574},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1520223370575},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1520223370575},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1520223370575},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1520223370575},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1520223370576},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1520223370576},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1520223370577},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1520223370577},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1520223370577},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1520223370577},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1520223370577},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1520223370578},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1520223370578},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1520223370584},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520223370585},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520223370586},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520223370602},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520223370603},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520223370603},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520223370604},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520223370604},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520223370615},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1520223370616},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1520223370616},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1520223370616},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1520223370617},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1520223370617},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520223370627},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520223370629},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520223370636},{"_id":"themes/next/.git/objects/pack/pack-b8112ba9b2c5bcb1cb04d783dc033a5ffee52826.idx","hash":"40b3e03b5059218f1654f42fa247459300719d43","modified":1520223370371},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1520223370611},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1520223370653},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1520223370633},{"_id":"themes/next/.git/objects/pack/pack-b8112ba9b2c5bcb1cb04d783dc033a5ffee52826.pack","hash":"e3ce8bde10cc496dd49a3dbb6e8adf7035e5faad","modified":1520223370417},{"_id":"source/image/head_pic.png","hash":"37885c51958c65cd0302ed5c84e1a19ae786d898","modified":1520300094602},{"_id":"themes/next/source/css/_common/components/header/header.styl.bak","hash":"b5d7e1c257eab0785e2bfcd626204d1101902c68","modified":1520317161331},{"_id":"source/image/head_myhexo.png","hash":"e8f75d22b89fd3df850a25b52437176f1512c998","modified":1520301792140},{"_id":"source/image/qianyuqianxun.png","hash":"968b0e4ab81540b5135b883c2ce7e97e86285b24","modified":1520299054626},{"_id":"source/image/head_hexo2.png","hash":"a4be9c33225a5ef35b3fbba1479ec4f5551c2353","modified":1520304197294},{"_id":"source/image/head_hexo1.png","hash":"a32bf2bd4e7bc6b459217b3ee16166534a236f58","modified":1520303386454},{"_id":"source/image/head_hexo3.png","hash":"622e75fcb889db5635866aff7d406b9a770811ce","modified":1520317371303},{"_id":"source/_posts/python_def.md","hash":"62075bbea552758252b565ef971b38f177e12afe","modified":1522510213996},{"_id":"source/_posts/python_import&reload.md","hash":"7cb3d095f81e0b972b158f1a70cd7a8d75ed4fd0","modified":1522510345960},{"_id":"source/image/head_hexo4.png","hash":"a69e53b31fea6551e9ab92b1988e5dbe5ccc6e55","modified":1521553464272}],"Category":[{"name":"Hexo建站","_id":"cjedzqce300043gd43zxoi20c"},{"name":"python基础","_id":"cjffjcl570000qzjqks48zjtx"}],"Data":[],"Page":[{"title":"","date":"2017-02-26T09:51:32.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-02-26 17:51:32\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-02-27T22:51:14.000Z","path":"categories/index.html","layout":"page","_id":"cjedzqcdp00013gd4wm3q7fds","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2016-09-16T16:29:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2016-09-17 00:29:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-02-27T22:51:14.000Z","path":"tags/index.html","layout":"page","_id":"cjedzqce000033gd4rgqk1l5v","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo 2：【基础】了解 hexo + githubPages 搭建博客的原理","date":"2017-02-26T06:30:15.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","source":"_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","raw":"---\ntitle: Hexo 2：【基础】了解 hexo + githubPages 搭建博客的原理\ndate: 2017-02-26 14:30:15\ntags: [Hexo] \ncategories: [Hexo建站]\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","slug":"Hexo-Understand-the-principles-of-githubPages-hexoblog","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqcdh00003gd4uxcoyu2k","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\" target=\"_blank\" rel=\"noopener\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages)\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/user-organization-and-project-pages)</a>:</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\" target=\"_blank\" rel=\"noopener\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:/hexo</span><br><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo g # 或者hexo generate</span><br><span class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦\" target=\"_blank\" rel=\"noopener\">http://sunshine940326.github.io来查看你的博客啦</a>~<br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/next</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">$ hexo g # 生成</span><br><span class=\"line\">$ hexo s # 启动本地web服务器</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">Next官方文档</a>,内容十分详尽</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br>","more":"</p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\" target=\"_blank\" rel=\"noopener\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages)\" target=\"_blank\" rel=\"noopener\">https://help.github.com/articles/user-organization-and-project-pages)</a>:</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\" target=\"_blank\" rel=\"noopener\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:/hexo</span><br><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo g # 或者hexo generate</span><br><span class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦\" target=\"_blank\" rel=\"noopener\">http://sunshine940326.github.io来查看你的博客啦</a>~<br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/next</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">$ hexo g # 生成</span><br><span class=\"line\">$ hexo s # 启动本地web服务器</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">Next官方文档</a>,内容十分详尽</p>"},{"title":"Hexo 5：【高阶】hexo高级进阶","date":"2016-09-16T17:14:19.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","source":"_posts/Hexo-advanced.md","raw":"---\ntitle: Hexo 5：【高阶】hexo高级进阶\ndate: 2016-09-17 01:14:19\ntags: [Hexo]\ncategories: [Hexo建站]\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","slug":"Hexo-advanced","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqcdx00023gd42he54pky","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br><a id=\"more\"></a></p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">    lang: en</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2015-06-01</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- foo</span><br><span class=\"line\">- bar</span><br></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_post_name: :lang/:title.md</span><br><span class=\"line\">permalink: :lang/:title/</span><br></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── languages</span><br><span class=\"line\">├── layout</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">└── source</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">index</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--layout.ejs--&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;index&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--partial/header.ejs--&gt;</span><br><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--partial/header.ejs--&gt;</span><br><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</span><br><span class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">7 feed_tag 插入feed链接。用法：</span><br><span class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</span><br><span class=\"line\"></span><br><span class=\"line\">（3）条件函数</span><br><span class=\"line\">---</span><br><span class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</span><br><span class=\"line\">    is_home 判断目前是否为首页。</span><br><span class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</span><br><span class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</span><br><span class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</span><br><span class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</span><br><span class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</span><br><span class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）字符串处理</span><br><span class=\"line\">---</span><br><span class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</span><br></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</span><br><span class=\"line\">    // Once upon\\n a time</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Once upon a time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</span><br><span class=\"line\">// 2013-01-01T00:00:00.000Z</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- time(Date.now()) %&gt;</span><br><span class=\"line\">    // 13:05:12</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</span><br><span class=\"line\">    // 1:05:12 pm</span><br><span class=\"line\"></span><br><span class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;%- full_date(new Date()) %&gt;</span><br><span class=\"line\">    // Jan 1, 2013 0:00:00</span><br><span class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</span><br><span class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</span><br><span class=\"line\"></span><br><span class=\"line\">（7）列表</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</span><br><span class=\"line\"></span><br><span class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</span><br><span class=\"line\"></span><br><span class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</span><br><span class=\"line\"> 示例：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</span><br><span class=\"line\"> // 12,345.68</span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</span><br><span class=\"line\"> // 12,345.6700</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</span><br><span class=\"line\"> // 12,345</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</span><br><span class=\"line\"> // 12345.67</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</span><br><span class=\"line\"> // 12,345/67</span><br><span class=\"line\"></span><br><span class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</span><br><span class=\"line\"></span><br><span class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</span><br><span class=\"line\"></span><br><span class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</span><br></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;<code>`</code></p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br>","more":"</p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">    lang: en</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">date: 2015-06-01</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- foo</span><br><span class=\"line\">- bar</span><br></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_post_name: :lang/:title.md</span><br><span class=\"line\">permalink: :lang/:title/</span><br></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── languages</span><br><span class=\"line\">├── layout</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">└── source</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">index</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--layout.ejs--&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;index&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--partial/header.ejs--&gt;</span><br><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--partial/header.ejs--&gt;</span><br><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--index.ejs--&gt;</span><br><span class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</span><br><span class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">7 feed_tag 插入feed链接。用法：</span><br><span class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</span><br><span class=\"line\"></span><br><span class=\"line\">（3）条件函数</span><br><span class=\"line\">---</span><br><span class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</span><br><span class=\"line\">    is_home 判断目前是否为首页。</span><br><span class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</span><br><span class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</span><br><span class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</span><br><span class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</span><br><span class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</span><br><span class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）字符串处理</span><br><span class=\"line\">---</span><br><span class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</span><br></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</span><br><span class=\"line\">    // Once upon\\n a time</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Once upon a time</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</span><br><span class=\"line\">// 2013-01-01T00:00:00.000Z</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">    &lt;%- time(Date.now()) %&gt;</span><br><span class=\"line\">    // 13:05:12</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</span><br><span class=\"line\">    // 1:05:12 pm</span><br><span class=\"line\"></span><br><span class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;%- full_date(new Date()) %&gt;</span><br><span class=\"line\">    // Jan 1, 2013 0:00:00</span><br><span class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</span><br><span class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</span><br><span class=\"line\"></span><br><span class=\"line\">（7）列表</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</span><br><span class=\"line\"></span><br><span class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</span><br><span class=\"line\"></span><br><span class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</span><br><span class=\"line\"></span><br><span class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</span><br><span class=\"line\"> 示例：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</span><br><span class=\"line\"> // 12,345.68</span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</span><br><span class=\"line\"> // 12,345.6700</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</span><br><span class=\"line\"> // 12,345</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</span><br><span class=\"line\"> // 12345.67</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</span><br><span class=\"line\"> // 12,345/67</span><br><span class=\"line\"></span><br><span class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</span><br><span class=\"line\"></span><br><span class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</span><br><span class=\"line\"></span><br><span class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</span><br></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;<code>`</code></p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>"},{"title":"Hexo 6：【高阶】想让你的博客被更多的人在搜索引擎中搜到吗？","date":"2017-04-16T05:24:51.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","source":"_posts/hexo-3.md","raw":"---\ntitle: Hexo 6：【高阶】想让你的博客被更多的人在搜索引擎中搜到吗？\ndate: 2017-04-16 13:24:51\ntags: [hexo高阶教程,hexo+gulp,hexo+七牛,hexo百度收录,hexo百度统计,hexo seo] \ncategories: [Hexo建站]\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","slug":"hexo-3","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqceg00073gd4jt714t6i","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>上一次在掘金上发表的<code>hexo</code>高阶教程：<a href=\"http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html\" target=\"_blank\" rel=\"noopener\">hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能</a>，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  </p>\n<ul>\n<li>seo优化</li>\n<li>多终端修改项目</li>\n<li>同时托管到github和coding上</li>\n<li>设置google和百度sitemap，让搜索引擎更好的抓取你的网站</li>\n<li>使用gulp对css、js进行优化</li>\n<li>接入七牛图床</li>\n<li>加入打赏功能</li>\n<li>加入照片模块</li>\n</ul>\n<p>开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  </p>\n<blockquote>\n<p>酒香不敌巷子深<br>我们要做对搜索引擎友好的站点<br><a id=\"more\"></a><br>所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~</p>\n</blockquote>\n<p>作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩</p>\n<p>在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。</p>\n<h1 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h1><p>推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好</p>\n<blockquote>\n<p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p>\n</blockquote>\n<h2 id=\"让百度收录你的站点\"><a href=\"#让百度收录你的站点\" class=\"headerlink\" title=\"让百度收录你的站点\"></a>让百度收录你的站点</h2><p>我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src=\"http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"查看站点是否被百度收录\"></p>\n<h3 id=\"验证网站所有权\"><a href=\"#验证网站所有权\" class=\"headerlink\" title=\"验证网站所有权\"></a>验证网站所有权</h3><p>登录百度站长平台：<a href=\"http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\" target=\"_blank\" rel=\"noopener\">http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</a><br><img src=\"http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"百度站长添加网站\"><br>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，<strong>但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）</strong>，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~<br><img src=\"http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"验证网站所有权\"></p>\n<h3 id=\"生成网站地图\"><a href=\"#生成网站地图\" class=\"headerlink\" title=\"生成网站地图\"></a>生成网站地图</h3><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p>\n<h4 id=\"安装sitemap插件\"><a href=\"#安装sitemap插件\" class=\"headerlink\" title=\"安装sitemap插件\"></a>安装sitemap插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save     </span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改博客配置文件\"><a href=\"#修改博客配置文件\" class=\"headerlink\" title=\"修改博客配置文件\"></a>修改博客配置文件</h4><p>在根目录配置文件中修改url为你的站点地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://cherryblog.site</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件</strong>，可以通过<a href=\"http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\" target=\"_blank\" rel=\"noopener\">http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</a></p>\n<h3 id=\"向百度提交链接\"><a href=\"#向百度提交链接\" class=\"headerlink\" title=\"向百度提交链接\"></a>向百度提交链接</h3><p>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p>\n<blockquote>\n<p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p>\n</blockquote>\n<p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法<br>从效率上来说：</p>\n<blockquote>\n<p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"连接提交\"></p>\n<h4 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h4><p>安装插件<code>npm install hexo-baidu-url-submit --save</code><br>然后再根目录的配置文件中新增字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baidu_url_submit:</span><br><span class=\"line\">  count: 100 # 提交最新的一个链接</span><br><span class=\"line\">  host: www.cherryblog.site # 在百度站长平台中注册的域名</span><br><span class=\"line\">  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class=\"line\">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure></p>\n<p>在加入新的deploye<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"> - type:baidu_url_submitter</span><br></pre></td></tr></table></figure></p>\n<p> 这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了</p>\n<h4 id=\"设置自动推送\"><a href=\"#设置自动推送\" class=\"headerlink\" title=\"设置自动推送\"></a>设置自动推送</h4><p>在主题配置文件下设置,将baidu_push设置为true：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class=\"line\">baidu_push: true</span><br></pre></td></tr></table></figure></p>\n<p>然后就会将一下代码自动推送到百度，位置是themes\\next\\layout_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.baidu_push %&#125;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var bp = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</span><br><span class=\"line\">    if (curProtocol === &apos;https&apos;) &#123;</span><br><span class=\"line\">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class=\"line\">    s.parentNode.insertBefore(bp, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h4><p>将我们上一步生成的sitemap文件提交到百度就可以了~<br><img src=\"http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"将sitemap提交到百度\"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果<br>在百度搜索<code>site:cherryblog.site</code>已经可以搜索到结果<br><img src=\"http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>在搜索框输入域名也可以找到站点<br><img src=\"http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>输入关键字的名字也可以在第二页就找到呢，好开森~<br><img src=\"http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"></p>\n<h2 id=\"让google收录你的站点\"><a href=\"#让google收录你的站点\" class=\"headerlink\" title=\"让google收录你的站点\"></a>让google收录你的站点</h2><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap<br>google站点平台：<a href=\"https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\" target=\"_blank\" rel=\"noopener\">https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了</a><br><img src=\"http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"></p>\n<h2 id=\"让其他搜索引擎收录你的站点\"><a href=\"#让其他搜索引擎收录你的站点\" class=\"headerlink\" title=\"让其他搜索引擎收录你的站点\"></a>让其他搜索引擎收录你的站点</h2><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的<br> ，大家就自行选择添加哈，这里就不再赘述了~</p>\n<h2 id=\"优化你的url\"><a href=\"#优化你的url\" class=\"headerlink\" title=\"优化你的url\"></a>优化你的url</h2><p>seo搜索引擎优化认为，网站的最佳结构是<strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: http://cherryblog.site</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他seo优化\"><a href=\"#其他seo优化\" class=\"headerlink\" title=\"其他seo优化\"></a>其他seo优化</h2><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so….</p>\n<ul>\n<li>网站<strong>外链</strong>的推广度、数量和质量</li>\n<li>网站的<strong>内链</strong>足够强大</li>\n<li>网站的<strong>原创</strong>质量</li>\n<li>网站的<strong>年龄</strong>时间</li>\n<li>网站的<strong>更新频率</strong>（更新次数越多越好）</li>\n<li>网站的<strong>服务器</strong></li>\n<li>网站的<strong>流量</strong>：流量越高网站的权重越高</li>\n<li>网站的<strong>关键词排名</strong>：关键词排名越靠前，网站的权重越高</li>\n<li>网站的<strong>收录</strong>数量：网站百度收录数量越多，网站百度权重越高</li>\n<li>网站的浏览量及深度：<strong>用户体验</strong>越好，网站的百度权重越高<h1 id=\"同时托管到github和coding上\"><a href=\"#同时托管到github和coding上\" class=\"headerlink\" title=\"同时托管到github和coding上\"></a>同时托管到github和coding上</h1>前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding<h2 id=\"将你的项目托管在coding上\"><a href=\"#将你的项目托管在coding上\" class=\"headerlink\" title=\"将你的项目托管在coding上\"></a>将你的项目托管在coding上</h2><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"><blockquote>\n<p>Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。<br>2016年3月CODING宣布收购代码托管平台GitCafe。</p>\n</blockquote>\n</li>\n</ul>\n<p>之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。</p>\n<h3 id=\"在coding上创建仓库\"><a href=\"#在coding上创建仓库\" class=\"headerlink\" title=\"在coding上创建仓库\"></a>在coding上创建仓库</h3><p>首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起<br><img src=\"http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建coding项目\"></p>\n<h3 id=\"将hexo博客同步到新创建的仓库中\"><a href=\"#将hexo博客同步到新创建的仓库中\" class=\"headerlink\" title=\"将hexo博客同步到新创建的仓库中\"></a>将hexo博客同步到新创建的仓库中</h3><p>第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上<br><img src=\"http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"自己的ssh公钥\"><br><img src=\"http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding中贴入ssh\"><br>在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  message: [message]</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: &lt;repository url&gt;,[branch]</span><br><span class=\"line\">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p>\n<p>所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    #github: git@github.com:sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">    github: https://github.com/sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">    coding: git@git.coding.net:cherry940326/cherry940326.git</span><br><span class=\"line\">    #coding: https://git.coding.net/cherry940326/cherry940326.git</span><br></pre></td></tr></table></figure></p>\n<p>完成之后在git bash 中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p>\n<p>如果得到如图提示就说明配置成功了<br><img src=\"http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置成功ssh\"><br>然后重新部署hexo就将代码上传至coding上了</p>\n<h3 id=\"设置coding的pages服务\"><a href=\"#设置coding的pages服务\" class=\"headerlink\" title=\"设置coding的pages服务\"></a>设置coding的pages服务</h3><p>将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了<br><img src=\"http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"找到pages\"><br><img src=\"http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置pages\"></p>\n<h3 id=\"设置域名解析\"><a href=\"#设置域名解析\" class=\"headerlink\" title=\"设置域名解析\"></a>设置域名解析</h3><p>然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：<br><img src=\"http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"域名解析\"></p>\n<hr>\n<p>至此就完成了将你的hexo编译的博客同时部署在github和coding上</p>\n<h1 id=\"多终端编辑hexo博客\"><a href=\"#多终端编辑hexo博客\" class=\"headerlink\" title=\"多终端编辑hexo博客\"></a>多终端编辑hexo博客</h1><p>之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。</p>\n<blockquote>\n<p>更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：<a href=\"http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\" target=\"_blank\" rel=\"noopener\">http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/</a></p>\n</blockquote>\n<h2 id=\"创建Hexo分支\"><a href=\"#创建Hexo分支\" class=\"headerlink\" title=\"创建Hexo分支\"></a>创建Hexo分支</h2><p>创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）</p>\n<h2 id=\"删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\"><a href=\"#删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\" class=\"headerlink\" title=\"删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\"></a>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件</h2><p>因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。<strong>.git文件夹被删除后整个文件对应的git仓库状态也会被清空</strong>)<br>.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/.deploy_git</span><br><span class=\"line\">/public  </span><br><span class=\"line\">/_config.yml</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.deploy_git是hexo默认的.git配置文件夹，不需要同步<br>public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 </p>\n</blockquote>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><p>然后我们再初始化仓库，重新对我们的代码进行版本控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;server&gt;</code>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p>\n<h2 id=\"将博客源文件上传至Hexo分支\"><a href=\"#将博客源文件上传至Hexo分支\" class=\"headerlink\" title=\"将博客源文件上传至Hexo分支\"></a>将博客源文件上传至Hexo分支</h2><p>依次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;...&quot;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>提交网站相关的文件； </p>\n<h2 id=\"对B电脑进行的操作\"><a href=\"#对B电脑进行的操作\" class=\"headerlink\" title=\"对B电脑进行的操作\"></a>对B电脑进行的操作</h2><p>假设B电脑现在没有我们的源文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h2><p>平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~</p>\n<ol>\n<li>依次执行git add .、git commit -m “…”、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；</li>\n<li>然后才执行hexo g -d发布网站到master分支上。<h1 id=\"使用gulp压缩你的代码\"><a href=\"#使用gulp压缩你的代码\" class=\"headerlink\" title=\"使用gulp压缩你的代码\"></a>使用gulp压缩你的代码</h1>当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~<h2 id=\"什么是gulp\"><a href=\"#什么是gulp\" class=\"headerlink\" title=\"什么是gulp\"></a>什么是gulp</h2>在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。<br>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。<blockquote>\n<p>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n</blockquote>\n</li>\n</ol>\n<p>既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~</p>\n<h3 id=\"npm小知识\"><a href=\"#npm小知识\" class=\"headerlink\" title=\"npm小知识\"></a>npm小知识</h3><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>\n<p>####使用npm安装插件：<code>npm install &lt;name&gt; [g] [--save -dev]</code></p>\n<ul>\n<li><code>&lt;name&gt;</code>:node 插件名称</li>\n<li><code>-g</code>:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm</code>;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的<code>node_modules</code>文件夹</li>\n<li><code>--save</code>：将配置信息保存在node项目配置文件<code>package.json</code>中</li>\n<li><code>-dev</code>：保存至<code>package.json</code> 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~</li>\n<li>为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是<code>npm install</code>，就可以下载<code>package.json</code> 下所有需要的包。<code>npm install --production</code>则只下载dependencies下的包<h4 id=\"使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\"><a href=\"#使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"使用npm卸载插件：npm unstall &lt;name&gt; [-g] [--save-dev]\"></a>使用npm卸载插件：<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code></h4></li>\n<li>在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code> 命令</li>\n<li>删除全部插件:<code>rimraf node_modules</code>（首先你需要先安装rimraf 插件）<h4 id=\"更新npm插件：npm-update-lt-name-gt-g-save-dev\"><a href=\"#更新npm插件：npm-update-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"更新npm插件：npm update &lt;name&gt; [g] [--save-dev]\"></a>更新npm插件：<code>npm update &lt;name&gt; [g] [--save-dev]</code></h4><h3 id=\"使用cnpm\"><a href=\"#使用cnpm\" class=\"headerlink\" title=\"使用cnpm\"></a>使用cnpm</h3>什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~<blockquote>\n<p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n</blockquote>\n</li>\n</ul>\n<p>cnpm 官网地址：<a href=\"http://npm.taobao.org；\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org；</a><br>安装命令为<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p>\n<blockquote>\n<p>注意：安装完后最好查看其版本号<code>cnpm -v</code>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>\n</blockquote>\n<h2 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h2><p>言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码<br><code>npm install gulp -g</code>,然后<code>npm -v</code> 查看版本号就可以知道我们是不是安装成功了~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！</p>\n<h2 id=\"新建package-json\"><a href=\"#新建package-json\" class=\"headerlink\" title=\"新建package.json\"></a>新建package.json</h2><p>使用<code>npm init</code>就可以创建package.json文件<br><img src=\"http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建package.json文件\">，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-baidu-url-submit&quot;: &quot;0.0.5&quot;,</span><br><span class=\"line\">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-util&quot;: &quot;^0.6.0&quot;,</span><br><span class=\"line\">    &quot;hexo-wordcount&quot;: &quot;^2.0.1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;gulp-babel&quot;: &quot;^6.1.2&quot;,</span><br><span class=\"line\">    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地安装gulp插件\"><a href=\"#本地安装gulp插件\" class=\"headerlink\" title=\"本地安装gulp插件\"></a>本地安装gulp插件</h2><p>在你的Hexo目录下右键<code>git bash here</code>然后执行<code>npm install &lt;name&gt; --save</code>,和gulp有关的包名称有以下几个，只需将<code>&lt;name&gt;</code>替换一下就好~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中<code>dependencies</code>下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~</p>\n<h2 id=\"建立gulp-js\"><a href=\"#建立gulp-js\" class=\"headerlink\" title=\"建立gulp.js\"></a>建立gulp.js</h2><p>gulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）<br>我的gulp.js文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取 gulp-imagemin 模块</span><br><span class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩 public 目录 css</span><br><span class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public 目录 html</span><br><span class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class=\"line\">        .pipe(htmlclean())</span><br><span class=\"line\">        .pipe(htmlmin(&#123;</span><br><span class=\"line\">            removeComments: true,  //清除HTML注释</span><br><span class=\"line\">            collapseWhitespace: true,  //压缩HTML</span><br><span class=\"line\">            collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</span><br><span class=\"line\">            removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class=\"line\">            removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class=\"line\">            removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class=\"line\">            minifyJS: true,  //压缩页面JS</span><br><span class=\"line\">            minifyCSS: true  //压缩页面CSS</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .on(&apos;error&apos;, function(err) &#123;</span><br><span class=\"line\">            console.log(&apos;html Error!&apos;, err.message);</span><br><span class=\"line\">            this.end();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public/js 目录 js</span><br><span class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩图片任务</span><br><span class=\"line\">// 在命令行输入 gulp images 启动此任务</span><br><span class=\"line\">gulp.task(&apos;images&apos;, function () &#123;</span><br><span class=\"line\">    // 1. 找到图片</span><br><span class=\"line\">    gulp.src(&apos;./photos/*.*&apos;)</span><br><span class=\"line\">    // 2. 压缩图片</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: true</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        // 3. 另存图片</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;dist/images&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行 gulp 命令时执行的任务</span><br><span class=\"line\">gulp.task(&apos;build&apos;, [</span><br><span class=\"line\">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;images&apos;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"执行gulp：gulp-build\"><a href=\"#执行gulp：gulp-build\" class=\"headerlink\" title=\"执行gulp：gulp build\"></a>执行gulp：<code>gulp build</code></h2><p><img src=\"http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gulpbuild执行结果\"></p>\n<h3 id=\"在git-bash中执行\"><a href=\"#在git-bash中执行\" class=\"headerlink\" title=\"在git bash中执行\"></a>在git bash中执行</h3><p>在git bash中直接输入命令<code>gulp build</code>就可以，这个<code>gulp build</code>是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字</p>\n<h3 id=\"在webstorm中执行\"><a href=\"#在webstorm中执行\" class=\"headerlink\" title=\"在webstorm中执行\"></a>在webstorm中执行</h3><p>webstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp<br><img src=\"http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在webstorm中执行gulp\"></p>\n<h1 id=\"增加七牛图床\"><a href=\"#增加七牛图床\" class=\"headerlink\" title=\"增加七牛图床\"></a>增加七牛图床</h1><p>增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~</p>\n<h2 id=\"注册七牛\"><a href=\"#注册七牛\" class=\"headerlink\" title=\"注册七牛\"></a>注册七牛</h2><p>万年不变的第一步，注册。官网：<a href=\"https://portal.qiniu.com/signup?code=3lnd6wvc103f6\" target=\"_blank\" rel=\"noopener\">七牛云</a></p>\n<h2 id=\"上传资源\"><a href=\"#上传资源\" class=\"headerlink\" title=\"上传资源\"></a>上传资源</h2><p>在登录成功之后，点击对象存储<br><img src=\"http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"><br>上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~<br><img src=\"http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"></p>\n<h3 id=\"添加水印\"><a href=\"#添加水印\" class=\"headerlink\" title=\"添加水印\"></a>添加水印</h3><p>使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。<br>七牛可以对上传的图片添加图片样式<br><img src=\"http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。<br><img src=\"http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\" target=\"_blank\" rel=\"noopener\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片</a><br><img src=\"http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在该地址后加上我设置的连接符,”-“和我的样式名称：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\" target=\"_blank\" rel=\"noopener\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印</a><br><img src=\"http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>上一次在掘金上发表的<code>hexo</code>高阶教程：<a href=\"http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html\" target=\"_blank\" rel=\"noopener\">hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能</a>，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  </p>\n<ul>\n<li>seo优化</li>\n<li>多终端修改项目</li>\n<li>同时托管到github和coding上</li>\n<li>设置google和百度sitemap，让搜索引擎更好的抓取你的网站</li>\n<li>使用gulp对css、js进行优化</li>\n<li>接入七牛图床</li>\n<li>加入打赏功能</li>\n<li>加入照片模块</li>\n</ul>\n<p>开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  </p>\n<blockquote>\n<p>酒香不敌巷子深<br>我们要做对搜索引擎友好的站点<br>","more":"<br>所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~</p>\n</blockquote>\n<p>作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩</p>\n<p>在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。</p>\n<h1 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h1><p>推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好</p>\n<blockquote>\n<p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p>\n</blockquote>\n<h2 id=\"让百度收录你的站点\"><a href=\"#让百度收录你的站点\" class=\"headerlink\" title=\"让百度收录你的站点\"></a>让百度收录你的站点</h2><p>我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src=\"http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"查看站点是否被百度收录\"></p>\n<h3 id=\"验证网站所有权\"><a href=\"#验证网站所有权\" class=\"headerlink\" title=\"验证网站所有权\"></a>验证网站所有权</h3><p>登录百度站长平台：<a href=\"http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\" target=\"_blank\" rel=\"noopener\">http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</a><br><img src=\"http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"百度站长添加网站\"><br>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，<strong>但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）</strong>，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~<br><img src=\"http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"验证网站所有权\"></p>\n<h3 id=\"生成网站地图\"><a href=\"#生成网站地图\" class=\"headerlink\" title=\"生成网站地图\"></a>生成网站地图</h3><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p>\n<h4 id=\"安装sitemap插件\"><a href=\"#安装sitemap插件\" class=\"headerlink\" title=\"安装sitemap插件\"></a>安装sitemap插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save     </span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改博客配置文件\"><a href=\"#修改博客配置文件\" class=\"headerlink\" title=\"修改博客配置文件\"></a>修改博客配置文件</h4><p>在根目录配置文件中修改url为你的站点地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://cherryblog.site</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件</strong>，可以通过<a href=\"http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\" target=\"_blank\" rel=\"noopener\">http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</a></p>\n<h3 id=\"向百度提交链接\"><a href=\"#向百度提交链接\" class=\"headerlink\" title=\"向百度提交链接\"></a>向百度提交链接</h3><p>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p>\n<blockquote>\n<p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p>\n</blockquote>\n<p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法<br>从效率上来说：</p>\n<blockquote>\n<p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"连接提交\"></p>\n<h4 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h4><p>安装插件<code>npm install hexo-baidu-url-submit --save</code><br>然后再根目录的配置文件中新增字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baidu_url_submit:</span><br><span class=\"line\">  count: 100 # 提交最新的一个链接</span><br><span class=\"line\">  host: www.cherryblog.site # 在百度站长平台中注册的域名</span><br><span class=\"line\">  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class=\"line\">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure></p>\n<p>在加入新的deploye<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"> - type:baidu_url_submitter</span><br></pre></td></tr></table></figure></p>\n<p> 这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了</p>\n<h4 id=\"设置自动推送\"><a href=\"#设置自动推送\" class=\"headerlink\" title=\"设置自动推送\"></a>设置自动推送</h4><p>在主题配置文件下设置,将baidu_push设置为true：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class=\"line\">baidu_push: true</span><br></pre></td></tr></table></figure></p>\n<p>然后就会将一下代码自动推送到百度，位置是themes\\next\\layout_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.baidu_push %&#125;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var bp = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</span><br><span class=\"line\">    if (curProtocol === &apos;https&apos;) &#123;</span><br><span class=\"line\">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</span><br><span class=\"line\">    s.parentNode.insertBefore(bp, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h4><p>将我们上一步生成的sitemap文件提交到百度就可以了~<br><img src=\"http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"将sitemap提交到百度\"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果<br>在百度搜索<code>site:cherryblog.site</code>已经可以搜索到结果<br><img src=\"http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>在搜索框输入域名也可以找到站点<br><img src=\"http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>输入关键字的名字也可以在第二页就找到呢，好开森~<br><img src=\"http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"></p>\n<h2 id=\"让google收录你的站点\"><a href=\"#让google收录你的站点\" class=\"headerlink\" title=\"让google收录你的站点\"></a>让google收录你的站点</h2><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap<br>google站点平台：<a href=\"https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\" target=\"_blank\" rel=\"noopener\">https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了</a><br><img src=\"http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"></p>\n<h2 id=\"让其他搜索引擎收录你的站点\"><a href=\"#让其他搜索引擎收录你的站点\" class=\"headerlink\" title=\"让其他搜索引擎收录你的站点\"></a>让其他搜索引擎收录你的站点</h2><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的<br> ，大家就自行选择添加哈，这里就不再赘述了~</p>\n<h2 id=\"优化你的url\"><a href=\"#优化你的url\" class=\"headerlink\" title=\"优化你的url\"></a>优化你的url</h2><p>seo搜索引擎优化认为，网站的最佳结构是<strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: http://cherryblog.site</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他seo优化\"><a href=\"#其他seo优化\" class=\"headerlink\" title=\"其他seo优化\"></a>其他seo优化</h2><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so….</p>\n<ul>\n<li>网站<strong>外链</strong>的推广度、数量和质量</li>\n<li>网站的<strong>内链</strong>足够强大</li>\n<li>网站的<strong>原创</strong>质量</li>\n<li>网站的<strong>年龄</strong>时间</li>\n<li>网站的<strong>更新频率</strong>（更新次数越多越好）</li>\n<li>网站的<strong>服务器</strong></li>\n<li>网站的<strong>流量</strong>：流量越高网站的权重越高</li>\n<li>网站的<strong>关键词排名</strong>：关键词排名越靠前，网站的权重越高</li>\n<li>网站的<strong>收录</strong>数量：网站百度收录数量越多，网站百度权重越高</li>\n<li>网站的浏览量及深度：<strong>用户体验</strong>越好，网站的百度权重越高<h1 id=\"同时托管到github和coding上\"><a href=\"#同时托管到github和coding上\" class=\"headerlink\" title=\"同时托管到github和coding上\"></a>同时托管到github和coding上</h1>前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding<h2 id=\"将你的项目托管在coding上\"><a href=\"#将你的项目托管在coding上\" class=\"headerlink\" title=\"将你的项目托管在coding上\"></a>将你的项目托管在coding上</h2><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"><blockquote>\n<p>Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。<br>2016年3月CODING宣布收购代码托管平台GitCafe。</p>\n</blockquote>\n</li>\n</ul>\n<p>之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。</p>\n<h3 id=\"在coding上创建仓库\"><a href=\"#在coding上创建仓库\" class=\"headerlink\" title=\"在coding上创建仓库\"></a>在coding上创建仓库</h3><p>首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起<br><img src=\"http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建coding项目\"></p>\n<h3 id=\"将hexo博客同步到新创建的仓库中\"><a href=\"#将hexo博客同步到新创建的仓库中\" class=\"headerlink\" title=\"将hexo博客同步到新创建的仓库中\"></a>将hexo博客同步到新创建的仓库中</h3><p>第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上<br><img src=\"http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"自己的ssh公钥\"><br><img src=\"http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding中贴入ssh\"><br>在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  message: [message]</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    github: &lt;repository url&gt;,[branch]</span><br><span class=\"line\">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p>\n<p>所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">    #github: git@github.com:sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">    github: https://github.com/sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">    coding: git@git.coding.net:cherry940326/cherry940326.git</span><br><span class=\"line\">    #coding: https://git.coding.net/cherry940326/cherry940326.git</span><br></pre></td></tr></table></figure></p>\n<p>完成之后在git bash 中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p>\n<p>如果得到如图提示就说明配置成功了<br><img src=\"http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置成功ssh\"><br>然后重新部署hexo就将代码上传至coding上了</p>\n<h3 id=\"设置coding的pages服务\"><a href=\"#设置coding的pages服务\" class=\"headerlink\" title=\"设置coding的pages服务\"></a>设置coding的pages服务</h3><p>将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了<br><img src=\"http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"找到pages\"><br><img src=\"http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置pages\"></p>\n<h3 id=\"设置域名解析\"><a href=\"#设置域名解析\" class=\"headerlink\" title=\"设置域名解析\"></a>设置域名解析</h3><p>然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：<br><img src=\"http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"域名解析\"></p>\n<hr>\n<p>至此就完成了将你的hexo编译的博客同时部署在github和coding上</p>\n<h1 id=\"多终端编辑hexo博客\"><a href=\"#多终端编辑hexo博客\" class=\"headerlink\" title=\"多终端编辑hexo博客\"></a>多终端编辑hexo博客</h1><p>之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。</p>\n<blockquote>\n<p>更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：<a href=\"http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\" target=\"_blank\" rel=\"noopener\">http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/</a></p>\n</blockquote>\n<h2 id=\"创建Hexo分支\"><a href=\"#创建Hexo分支\" class=\"headerlink\" title=\"创建Hexo分支\"></a>创建Hexo分支</h2><p>创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）</p>\n<h2 id=\"删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\"><a href=\"#删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\" class=\"headerlink\" title=\"删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\"></a>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件</h2><p>因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。<strong>.git文件夹被删除后整个文件对应的git仓库状态也会被清空</strong>)<br>.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/.deploy_git</span><br><span class=\"line\">/public  </span><br><span class=\"line\">/_config.yml</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.deploy_git是hexo默认的.git配置文件夹，不需要同步<br>public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 </p>\n</blockquote>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><p>然后我们再初始化仓库，重新对我们的代码进行版本控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;server&gt;</code>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p>\n<h2 id=\"将博客源文件上传至Hexo分支\"><a href=\"#将博客源文件上传至Hexo分支\" class=\"headerlink\" title=\"将博客源文件上传至Hexo分支\"></a>将博客源文件上传至Hexo分支</h2><p>依次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;...&quot;</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>提交网站相关的文件； </p>\n<h2 id=\"对B电脑进行的操作\"><a href=\"#对B电脑进行的操作\" class=\"headerlink\" title=\"对B电脑进行的操作\"></a>对B电脑进行的操作</h2><p>假设B电脑现在没有我们的源文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h2><p>平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~</p>\n<ol>\n<li>依次执行git add .、git commit -m “…”、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；</li>\n<li>然后才执行hexo g -d发布网站到master分支上。<h1 id=\"使用gulp压缩你的代码\"><a href=\"#使用gulp压缩你的代码\" class=\"headerlink\" title=\"使用gulp压缩你的代码\"></a>使用gulp压缩你的代码</h1>当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~<h2 id=\"什么是gulp\"><a href=\"#什么是gulp\" class=\"headerlink\" title=\"什么是gulp\"></a>什么是gulp</h2>在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。<br>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。<blockquote>\n<p>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n</blockquote>\n</li>\n</ol>\n<p>既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~</p>\n<h3 id=\"npm小知识\"><a href=\"#npm小知识\" class=\"headerlink\" title=\"npm小知识\"></a>npm小知识</h3><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>\n<p>####使用npm安装插件：<code>npm install &lt;name&gt; [g] [--save -dev]</code></p>\n<ul>\n<li><code>&lt;name&gt;</code>:node 插件名称</li>\n<li><code>-g</code>:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm</code>;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的<code>node_modules</code>文件夹</li>\n<li><code>--save</code>：将配置信息保存在node项目配置文件<code>package.json</code>中</li>\n<li><code>-dev</code>：保存至<code>package.json</code> 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~</li>\n<li>为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是<code>npm install</code>，就可以下载<code>package.json</code> 下所有需要的包。<code>npm install --production</code>则只下载dependencies下的包<h4 id=\"使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\"><a href=\"#使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"使用npm卸载插件：npm unstall &lt;name&gt; [-g] [--save-dev]\"></a>使用npm卸载插件：<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code></h4></li>\n<li>在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code> 命令</li>\n<li>删除全部插件:<code>rimraf node_modules</code>（首先你需要先安装rimraf 插件）<h4 id=\"更新npm插件：npm-update-lt-name-gt-g-save-dev\"><a href=\"#更新npm插件：npm-update-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"更新npm插件：npm update &lt;name&gt; [g] [--save-dev]\"></a>更新npm插件：<code>npm update &lt;name&gt; [g] [--save-dev]</code></h4><h3 id=\"使用cnpm\"><a href=\"#使用cnpm\" class=\"headerlink\" title=\"使用cnpm\"></a>使用cnpm</h3>什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~<blockquote>\n<p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n</blockquote>\n</li>\n</ul>\n<p>cnpm 官网地址：<a href=\"http://npm.taobao.org；\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org；</a><br>安装命令为<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p>\n<blockquote>\n<p>注意：安装完后最好查看其版本号<code>cnpm -v</code>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>\n</blockquote>\n<h2 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h2><p>言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码<br><code>npm install gulp -g</code>,然后<code>npm -v</code> 查看版本号就可以知道我们是不是安装成功了~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！</p>\n<h2 id=\"新建package-json\"><a href=\"#新建package-json\" class=\"headerlink\" title=\"新建package.json\"></a>新建package.json</h2><p>使用<code>npm init</code>就可以创建package.json文件<br><img src=\"http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建package.json文件\">，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-baidu-url-submit&quot;: &quot;0.0.5&quot;,</span><br><span class=\"line\">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-util&quot;: &quot;^0.6.0&quot;,</span><br><span class=\"line\">    &quot;hexo-wordcount&quot;: &quot;^2.0.1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;gulp-babel&quot;: &quot;^6.1.2&quot;,</span><br><span class=\"line\">    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地安装gulp插件\"><a href=\"#本地安装gulp插件\" class=\"headerlink\" title=\"本地安装gulp插件\"></a>本地安装gulp插件</h2><p>在你的Hexo目录下右键<code>git bash here</code>然后执行<code>npm install &lt;name&gt; --save</code>,和gulp有关的包名称有以下几个，只需将<code>&lt;name&gt;</code>替换一下就好~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</span><br><span class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中<code>dependencies</code>下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~</p>\n<h2 id=\"建立gulp-js\"><a href=\"#建立gulp-js\" class=\"headerlink\" title=\"建立gulp.js\"></a>建立gulp.js</h2><p>gulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）<br>我的gulp.js文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取 gulp-imagemin 模块</span><br><span class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩 public 目录 css</span><br><span class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public 目录 html</span><br><span class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class=\"line\">        .pipe(htmlclean())</span><br><span class=\"line\">        .pipe(htmlmin(&#123;</span><br><span class=\"line\">            removeComments: true,  //清除HTML注释</span><br><span class=\"line\">            collapseWhitespace: true,  //压缩HTML</span><br><span class=\"line\">            collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</span><br><span class=\"line\">            removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class=\"line\">            removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class=\"line\">            removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class=\"line\">            minifyJS: true,  //压缩页面JS</span><br><span class=\"line\">            minifyCSS: true  //压缩页面CSS</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .on(&apos;error&apos;, function(err) &#123;</span><br><span class=\"line\">            console.log(&apos;html Error!&apos;, err.message);</span><br><span class=\"line\">            this.end();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public/js 目录 js</span><br><span class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩图片任务</span><br><span class=\"line\">// 在命令行输入 gulp images 启动此任务</span><br><span class=\"line\">gulp.task(&apos;images&apos;, function () &#123;</span><br><span class=\"line\">    // 1. 找到图片</span><br><span class=\"line\">    gulp.src(&apos;./photos/*.*&apos;)</span><br><span class=\"line\">    // 2. 压缩图片</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">            progressive: true</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        // 3. 另存图片</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;dist/images&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行 gulp 命令时执行的任务</span><br><span class=\"line\">gulp.task(&apos;build&apos;, [</span><br><span class=\"line\">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;images&apos;,</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"执行gulp：gulp-build\"><a href=\"#执行gulp：gulp-build\" class=\"headerlink\" title=\"执行gulp：gulp build\"></a>执行gulp：<code>gulp build</code></h2><p><img src=\"http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gulpbuild执行结果\"></p>\n<h3 id=\"在git-bash中执行\"><a href=\"#在git-bash中执行\" class=\"headerlink\" title=\"在git bash中执行\"></a>在git bash中执行</h3><p>在git bash中直接输入命令<code>gulp build</code>就可以，这个<code>gulp build</code>是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字</p>\n<h3 id=\"在webstorm中执行\"><a href=\"#在webstorm中执行\" class=\"headerlink\" title=\"在webstorm中执行\"></a>在webstorm中执行</h3><p>webstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp<br><img src=\"http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在webstorm中执行gulp\"></p>\n<h1 id=\"增加七牛图床\"><a href=\"#增加七牛图床\" class=\"headerlink\" title=\"增加七牛图床\"></a>增加七牛图床</h1><p>增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~</p>\n<h2 id=\"注册七牛\"><a href=\"#注册七牛\" class=\"headerlink\" title=\"注册七牛\"></a>注册七牛</h2><p>万年不变的第一步，注册。官网：<a href=\"https://portal.qiniu.com/signup?code=3lnd6wvc103f6\" target=\"_blank\" rel=\"noopener\">七牛云</a></p>\n<h2 id=\"上传资源\"><a href=\"#上传资源\" class=\"headerlink\" title=\"上传资源\"></a>上传资源</h2><p>在登录成功之后，点击对象存储<br><img src=\"http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"><br>上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~<br><img src=\"http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"></p>\n<h3 id=\"添加水印\"><a href=\"#添加水印\" class=\"headerlink\" title=\"添加水印\"></a>添加水印</h3><p>使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。<br>七牛可以对上传的图片添加图片样式<br><img src=\"http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。<br><img src=\"http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\" target=\"_blank\" rel=\"noopener\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片</a><br><img src=\"http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在该地址后加上我设置的连接符,”-“和我的样式名称：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\" target=\"_blank\" rel=\"noopener\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印</a><br><img src=\"http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"Hexo 7：【原理】深入理解 Hexo","date":"2017-08-12T05:24:51.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一直在用 Hexo 写博客，但是对其原理并不是很清晰，在网上找了一些资料，对 Hexo 有了新的认识，现在就来记录一下\n\n<!--more-->\n# 使用 Hexo + github pages 搭建博客\n记得刚开始知道 Hexo + github pages 搭建博客是在 2016 年，那时候，闺蜜非常激动的给我说自己建了一个博客，然后给我发过来了一个地址，我打开之后感觉她技术好牛逼啊，这都可以做到（因为潜意识中，创建一个网址是需要很复杂的过程的，并且要让别人通过地址访问也是一个很麻烦甚至觉得很花钱的一件事情）。\n\n然后她给我说很简单，是用 Hexo + github pages 搭建的，当时是一脸懵逼啊，然后百度了一下，发现很多人都在使用 Hexo + github pages 搭建博客。\n\n拖延症的我又过了几个月才开始按照网上的教程一步一步的创建自己的博客。\n\n## github 的 pages 服务 \n\n开始只是按照网上的教程一步一步跟着做，将项目源码托管在 github 上，使用 github 的 pages 服务。其实 github 的 pages 服务不只是可以展示博客，你的每一个 github 仓库都有 pages 服务，可以通过简单的设置通过项目的 index.html 为入口展示你的项目，这一点也很实用啊有木有！但是大部分的 pages 服务都是用来搭建个人博客的。\n\n例如，我之前的 canvasStar 的项目，我将源码上传到了 github 上，然后如下设置：\n![pages服务第一步](http://img.blog.csdn.net/20170811153556910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![pages服务第二步](http://img.blog.csdn.net/20170811154125248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n> github pages支持静态页面的解析\n\n然后你就可以通过图中红色框框圈出的地址来访问。\n\n## coding 的 pages 服务\n在初创博客的时候，是将代码放在 github 上，然后通过 pages 访问，然后了解到国内访问 github 速度还是慢一些，并且 github 不会被百度收录，不利于 SEO，所以又将代码托管到了 coding 上，coding 也有类似的 pages 服务。也用了一段时间，但是 coding 现在不升级为会员打开有广告。于是就自己买了个虚拟主机，将代码直接放在了虚拟主机上。\n\n## 为什么使用 Hexo + github pages 搭建博客\nHexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用 coding 的 pages 服务，如果自己有服务器的话，可以上传到自己的服务器）。\n\n# Hexo\n使用 Hexo + github pages 搭建博客，刚刚我们简单介绍了 github pages，那么现在我们就该介绍一下 Hexo，我们了解到 Hexo 是用来生成 HTML 的，那么这篇文章我们就主要来讲一下 Hexo 是怎样生成 HTML 的。\n\n## 什么是 Hexo\n![hexo官网](http://img.blog.csdn.net/20170811161953548?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：**快速、简洁且高效的博客框架**\n\n在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n在官方文档中安装了 Hexo 中我们就安装了 Hexo，然后我们就可以看到文档结构如下：\n```\n.\n├── _config.yml      // 站点配置文件\n├── db.json          // 缓存文件\n├── node_modules     // 安装的插件以及hexo所需的一些nodejs模块\n├── package.json     // 项目的依赖文件\n├── scaffolds        // 模版文件\n├── source           // 源文件，用来存放你的文章 md 文件\n└── themes           // 主题文件\n```\n\n然后我们可以安装主题，比我我安装的 NexT 主题，安装完之后会在 `themes` 下面产生一个 next 文件存放主题中的内容，文档结构如下：\n```\n.\n├── LICENSE\n├── README.en.md       // READEME 英文版\n├── README.md          // READEME 中文文件\n├── _config.yml        // 主题配置文件\n├── bower.json\n├── gulpfile.coffee\n├── languages         // 多语言配置文件\n├── layout            // 模板文件\n├── package.json      // 项目的依赖文件\n├── scripts           // 主题的脚本文件\n├── source            // 主题的资源文件 CSS IMG\n└── test\n```\n\n## Hexo 的工作原理\n这里我们来分析一下 Hexo 每次部署的流程\n1. hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 `source` 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 `pubild` 文件夹中，此时的 `publid` 文件是由 html、 js、css、img 建立的纯静态文件可以通过 `index.html` 作为入口访问你的博客。\n2. hexo d：部署文件。部署主要是根据在 `_config.yml` 中配置的 `git` 仓库或者 `coding` 的地址，将 `public` 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 `public` 文件上传至你自己的服务器上。\n\n# Hexo 的模板引擎\n> 模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。\n\n我们可以注意到，在 Hexo 中，`source` 文件夹和 `themes` 文件夹是在同级的，我们就可以将 `source` 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 `hexo g` 就将我们的数据和界面相结合生成静态文件 `public`。\n\nHexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。\n\n模板文件在 `layout` 文件夹下，`layout` 文件文档结构如下：\n```\n.\n├── _custom                           // 通用布局\n├── _layout.swig                      // 默认布局布局\n├── _macro                            // 插件模板\n├── _partials                         // 局部布局\n├── _scripts                          // script模板\n├── _third-party                      // 第三方插件模板\n├── archive.swig                      // 归档模板\n├── category.swig                     // 分类模板\n├── index.swig                        // 首页模板\n├── page.swig                         // 其他模板\n├── photo.swig                        // 照片模板（自定义）\n├── post.swig                         // 文章模板\n├── schedule.swig                     // 归档模板\n└── tag.swig                          // 标签模板\n```\n> 每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n在我们新建页面或者新建文章的使用可以选定我们使用的模板。`hexo new [layout] <title>`就会使用对应的模板。\n\n其中 `_layout.swig` 是通用模板，里面引入了 `head`、`footer` 等公共组件，然后在其他的模板中会引入这个 `_layout.swig` 通用模板，比如 `post.swig` 模板\n```\n{% extends '_layout.swig' %}\n{% import '_macro/post.swig' as post_template %}\n{% import '_macro/sidebar.swig' as sidebar_template %}\n\n\n{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}\n\n{% block page_class %}page-post-detail{% endblock %}\n\n\n{% block content %}\n\n  <div id=\"posts\" class=\"posts-expand\">\n    {{ post_template.render(page) }}\n\n    <div class=\"post-spread\">\n      {% if theme.jiathis %}\n        {% include '_partials/share/jiathis.swig' %}\n      {% elseif theme.baidushare %}\n        {% include '_partials/share/baidushare.swig' %}\n      {% elseif theme.add_this_id %}\n        {% include '_partials/share/add-this.swig' %}\n      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}\n        {% include '_partials/share/duoshuo_share.swig' %}\n      {% endif %}\n    </div>\n  </div>\n\n{% endblock %}\n\n{% block sidebar %}\n  {{ sidebar_template.render(true) }}\n{% endblock %}\n\n\n{% block script_extra %}\n  {% include '_scripts/pages/post-details.swig' %}\n{% endblock %}\n\n```\n其中在第 11 行\n```\n{% block content %} \n    // 中间为该模板自定义内容\n{% endblock %}\n```\n# 数据的填充\n数据的填充主要是 `hexo -g` 的时候将数据传递给 swig 模板，然后再由 swig 模板填充到 HTML 中。\n\n## 配置文件中的数据\nHexo 的配置文件 `_config.yml` 使用 [yml语法](http://docs.ansible.com/ansible/latest/YAMLSyntax.html) 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组，\n\n## 配置文件中数据的使用\n如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 swig 中直接使用：\n```\n{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}\n```\n\n## Hexo 中的变量\nHexo 提供了很多的变量，比如我们上面使用的 `page` 变量，还有 `site` 变量等，这些都是 Hexo 提供的，我们可以拿来直接使用的，常用的变量有：\n- `site`：对应整个网站的变量，一般会用到 `site.posts.length` 制作分页器。\n  - `site.posts` 所有文章\n  - `site.pages` 所有分页\n  - `site.categories` 所有分类\n  - `site.tags` 所有标签\n- `page`：存放当前页面的信息，例如我在 `index.ejs` 中使用 `page.posts` 获取了当前页面的所有文章而不是使用 `site.posts`。\n- `config`：`config` 变量我们在主目录下配置文件 `_config.yml` 中保存的信息。\n- `theme`：`theme` 变量是我们在主题目录下配置文件 `_config.yml` 中保存的信息。\n- `path`：当前页面的路径（不含根路径）。\n- `url`：页面完整网址。\n\n### 页面变量\n\nPage(page) 这里指的是 `hexo new page` 创建的那个页面\n- `page.title`：文章标题\n- `page.date`：文章建立日期\n- `page.updated`：文章更新日期\n- `page.comments`：留言是否开启\n- `page.layout`：布局名称\n- `page.content`：文章完整内容\n- `page.excerpt`：文章摘要\n- `page.more`：除了摘要的其他内容\n- `page.source`：文章原始路劲\n- `page.full_source`：文章完整原始路径\n- `page.path`：文章网址（不含根路径），通常在主题中使用url_for(page.path)\n- `page.permalink`：文章永久网址\n- `page.prev`：上一篇文章，如果此为第一篇文章则为null\n- `page.next`：下一篇文章，如果此为最后一篇文章则为null\n- `page.raw`：文章原始内容\n- `page.photos`：文章的照片（用于相册）\n- `page.link`：文章的外链（用于链接文章）\n\n### Post(post) 变量\n这里指的是文章页面，与page布局相同，添加如下变量：\n- `page.pulished`：文章非草稿为true\n- `page.categories`：文章分类\n- `page.tags`：文章标签\n\n### 首页(index)\n- `page.per_page`：每一页显示的文章数\n- `page.total`：文章数量\n- `page.current`：当前页码\n- `page.current_url`：当前页的URL\n- `page.posts`：当前页的文章\n- `page.prev`：前一页页码，如果为第一页，该值为0\n- `page.prev_link`：前一页URL，如果为第一页，则为''\n- `page.next`：后一页页码，如果为最后一页，则为0\n- `page.next_link`：后一页URL，如果为最后一页，则为''\n- `page.path`：当前页网址（不含根路径），通常在主题中使用url_for(page.path)\n\n### 归档页(archive) \n与index布局相同，但是新增如下变量：\n- `archive` 为true\n- `year` 归档年份（4位）\n- `month` 归档月份（不包含0）\n\n# 总结\n非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。\n\n再深入一点讲 Hexo 的原理的话，那就应该是使用 [yaml 语言](http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt) 做配置文件，使用 [ejs](http://www.360doc.com/content/16/0115/10/597197_528136785.shtml) 或者 [swig](https://www.ibm.com/developerworks/cn/aix/library/au-swig/) 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。\n\n# 参考文献：\n- [Hexo Docs](http://www.ituring.com.cn/article/199295)\n- [写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336)\n- [Hexo 主题制作指南](http://www.360doc.com/content/16/0913/16/33651124_590545274.shtml#/)\n- [hexo原理浅析](https://segmentfault.com/a/1190000008784436)\n","source":"_posts/hexo-4.md","raw":"---\ntitle: Hexo 7：【原理】深入理解 Hexo\ndate: 2017-08-12 13:24:51\ntags: [hexo高阶教程,hexo原理,github的pages服务] \ncategories: [Hexo建站]\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一直在用 Hexo 写博客，但是对其原理并不是很清晰，在网上找了一些资料，对 Hexo 有了新的认识，现在就来记录一下\n\n<!--more-->\n# 使用 Hexo + github pages 搭建博客\n记得刚开始知道 Hexo + github pages 搭建博客是在 2016 年，那时候，闺蜜非常激动的给我说自己建了一个博客，然后给我发过来了一个地址，我打开之后感觉她技术好牛逼啊，这都可以做到（因为潜意识中，创建一个网址是需要很复杂的过程的，并且要让别人通过地址访问也是一个很麻烦甚至觉得很花钱的一件事情）。\n\n然后她给我说很简单，是用 Hexo + github pages 搭建的，当时是一脸懵逼啊，然后百度了一下，发现很多人都在使用 Hexo + github pages 搭建博客。\n\n拖延症的我又过了几个月才开始按照网上的教程一步一步的创建自己的博客。\n\n## github 的 pages 服务 \n\n开始只是按照网上的教程一步一步跟着做，将项目源码托管在 github 上，使用 github 的 pages 服务。其实 github 的 pages 服务不只是可以展示博客，你的每一个 github 仓库都有 pages 服务，可以通过简单的设置通过项目的 index.html 为入口展示你的项目，这一点也很实用啊有木有！但是大部分的 pages 服务都是用来搭建个人博客的。\n\n例如，我之前的 canvasStar 的项目，我将源码上传到了 github 上，然后如下设置：\n![pages服务第一步](http://img.blog.csdn.net/20170811153556910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![pages服务第二步](http://img.blog.csdn.net/20170811154125248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n> github pages支持静态页面的解析\n\n然后你就可以通过图中红色框框圈出的地址来访问。\n\n## coding 的 pages 服务\n在初创博客的时候，是将代码放在 github 上，然后通过 pages 访问，然后了解到国内访问 github 速度还是慢一些，并且 github 不会被百度收录，不利于 SEO，所以又将代码托管到了 coding 上，coding 也有类似的 pages 服务。也用了一段时间，但是 coding 现在不升级为会员打开有广告。于是就自己买了个虚拟主机，将代码直接放在了虚拟主机上。\n\n## 为什么使用 Hexo + github pages 搭建博客\nHexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用 coding 的 pages 服务，如果自己有服务器的话，可以上传到自己的服务器）。\n\n# Hexo\n使用 Hexo + github pages 搭建博客，刚刚我们简单介绍了 github pages，那么现在我们就该介绍一下 Hexo，我们了解到 Hexo 是用来生成 HTML 的，那么这篇文章我们就主要来讲一下 Hexo 是怎样生成 HTML 的。\n\n## 什么是 Hexo\n![hexo官网](http://img.blog.csdn.net/20170811161953548?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：**快速、简洁且高效的博客框架**\n\n在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n在官方文档中安装了 Hexo 中我们就安装了 Hexo，然后我们就可以看到文档结构如下：\n```\n.\n├── _config.yml      // 站点配置文件\n├── db.json          // 缓存文件\n├── node_modules     // 安装的插件以及hexo所需的一些nodejs模块\n├── package.json     // 项目的依赖文件\n├── scaffolds        // 模版文件\n├── source           // 源文件，用来存放你的文章 md 文件\n└── themes           // 主题文件\n```\n\n然后我们可以安装主题，比我我安装的 NexT 主题，安装完之后会在 `themes` 下面产生一个 next 文件存放主题中的内容，文档结构如下：\n```\n.\n├── LICENSE\n├── README.en.md       // READEME 英文版\n├── README.md          // READEME 中文文件\n├── _config.yml        // 主题配置文件\n├── bower.json\n├── gulpfile.coffee\n├── languages         // 多语言配置文件\n├── layout            // 模板文件\n├── package.json      // 项目的依赖文件\n├── scripts           // 主题的脚本文件\n├── source            // 主题的资源文件 CSS IMG\n└── test\n```\n\n## Hexo 的工作原理\n这里我们来分析一下 Hexo 每次部署的流程\n1. hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 `source` 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 `pubild` 文件夹中，此时的 `publid` 文件是由 html、 js、css、img 建立的纯静态文件可以通过 `index.html` 作为入口访问你的博客。\n2. hexo d：部署文件。部署主要是根据在 `_config.yml` 中配置的 `git` 仓库或者 `coding` 的地址，将 `public` 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 `public` 文件上传至你自己的服务器上。\n\n# Hexo 的模板引擎\n> 模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。\n\n我们可以注意到，在 Hexo 中，`source` 文件夹和 `themes` 文件夹是在同级的，我们就可以将 `source` 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 `hexo g` 就将我们的数据和界面相结合生成静态文件 `public`。\n\nHexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。\n\n模板文件在 `layout` 文件夹下，`layout` 文件文档结构如下：\n```\n.\n├── _custom                           // 通用布局\n├── _layout.swig                      // 默认布局布局\n├── _macro                            // 插件模板\n├── _partials                         // 局部布局\n├── _scripts                          // script模板\n├── _third-party                      // 第三方插件模板\n├── archive.swig                      // 归档模板\n├── category.swig                     // 分类模板\n├── index.swig                        // 首页模板\n├── page.swig                         // 其他模板\n├── photo.swig                        // 照片模板（自定义）\n├── post.swig                         // 文章模板\n├── schedule.swig                     // 归档模板\n└── tag.swig                          // 标签模板\n```\n> 每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n在我们新建页面或者新建文章的使用可以选定我们使用的模板。`hexo new [layout] <title>`就会使用对应的模板。\n\n其中 `_layout.swig` 是通用模板，里面引入了 `head`、`footer` 等公共组件，然后在其他的模板中会引入这个 `_layout.swig` 通用模板，比如 `post.swig` 模板\n```\n{% extends '_layout.swig' %}\n{% import '_macro/post.swig' as post_template %}\n{% import '_macro/sidebar.swig' as sidebar_template %}\n\n\n{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}\n\n{% block page_class %}page-post-detail{% endblock %}\n\n\n{% block content %}\n\n  <div id=\"posts\" class=\"posts-expand\">\n    {{ post_template.render(page) }}\n\n    <div class=\"post-spread\">\n      {% if theme.jiathis %}\n        {% include '_partials/share/jiathis.swig' %}\n      {% elseif theme.baidushare %}\n        {% include '_partials/share/baidushare.swig' %}\n      {% elseif theme.add_this_id %}\n        {% include '_partials/share/add-this.swig' %}\n      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}\n        {% include '_partials/share/duoshuo_share.swig' %}\n      {% endif %}\n    </div>\n  </div>\n\n{% endblock %}\n\n{% block sidebar %}\n  {{ sidebar_template.render(true) }}\n{% endblock %}\n\n\n{% block script_extra %}\n  {% include '_scripts/pages/post-details.swig' %}\n{% endblock %}\n\n```\n其中在第 11 行\n```\n{% block content %} \n    // 中间为该模板自定义内容\n{% endblock %}\n```\n# 数据的填充\n数据的填充主要是 `hexo -g` 的时候将数据传递给 swig 模板，然后再由 swig 模板填充到 HTML 中。\n\n## 配置文件中的数据\nHexo 的配置文件 `_config.yml` 使用 [yml语法](http://docs.ansible.com/ansible/latest/YAMLSyntax.html) 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组，\n\n## 配置文件中数据的使用\n如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 swig 中直接使用：\n```\n{% block title %} {{ page.title }} | {{ config.title }} {% endblock %}\n```\n\n## Hexo 中的变量\nHexo 提供了很多的变量，比如我们上面使用的 `page` 变量，还有 `site` 变量等，这些都是 Hexo 提供的，我们可以拿来直接使用的，常用的变量有：\n- `site`：对应整个网站的变量，一般会用到 `site.posts.length` 制作分页器。\n  - `site.posts` 所有文章\n  - `site.pages` 所有分页\n  - `site.categories` 所有分类\n  - `site.tags` 所有标签\n- `page`：存放当前页面的信息，例如我在 `index.ejs` 中使用 `page.posts` 获取了当前页面的所有文章而不是使用 `site.posts`。\n- `config`：`config` 变量我们在主目录下配置文件 `_config.yml` 中保存的信息。\n- `theme`：`theme` 变量是我们在主题目录下配置文件 `_config.yml` 中保存的信息。\n- `path`：当前页面的路径（不含根路径）。\n- `url`：页面完整网址。\n\n### 页面变量\n\nPage(page) 这里指的是 `hexo new page` 创建的那个页面\n- `page.title`：文章标题\n- `page.date`：文章建立日期\n- `page.updated`：文章更新日期\n- `page.comments`：留言是否开启\n- `page.layout`：布局名称\n- `page.content`：文章完整内容\n- `page.excerpt`：文章摘要\n- `page.more`：除了摘要的其他内容\n- `page.source`：文章原始路劲\n- `page.full_source`：文章完整原始路径\n- `page.path`：文章网址（不含根路径），通常在主题中使用url_for(page.path)\n- `page.permalink`：文章永久网址\n- `page.prev`：上一篇文章，如果此为第一篇文章则为null\n- `page.next`：下一篇文章，如果此为最后一篇文章则为null\n- `page.raw`：文章原始内容\n- `page.photos`：文章的照片（用于相册）\n- `page.link`：文章的外链（用于链接文章）\n\n### Post(post) 变量\n这里指的是文章页面，与page布局相同，添加如下变量：\n- `page.pulished`：文章非草稿为true\n- `page.categories`：文章分类\n- `page.tags`：文章标签\n\n### 首页(index)\n- `page.per_page`：每一页显示的文章数\n- `page.total`：文章数量\n- `page.current`：当前页码\n- `page.current_url`：当前页的URL\n- `page.posts`：当前页的文章\n- `page.prev`：前一页页码，如果为第一页，该值为0\n- `page.prev_link`：前一页URL，如果为第一页，则为''\n- `page.next`：后一页页码，如果为最后一页，则为0\n- `page.next_link`：后一页URL，如果为最后一页，则为''\n- `page.path`：当前页网址（不含根路径），通常在主题中使用url_for(page.path)\n\n### 归档页(archive) \n与index布局相同，但是新增如下变量：\n- `archive` 为true\n- `year` 归档年份（4位）\n- `month` 归档月份（不包含0）\n\n# 总结\n非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。\n\n再深入一点讲 Hexo 的原理的话，那就应该是使用 [yaml 语言](http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt) 做配置文件，使用 [ejs](http://www.360doc.com/content/16/0115/10/597197_528136785.shtml) 或者 [swig](https://www.ibm.com/developerworks/cn/aix/library/au-swig/) 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。\n\n# 参考文献：\n- [Hexo Docs](http://www.ituring.com.cn/article/199295)\n- [写一个自己的Hexo主题](https://segmentfault.com/a/1190000006057336)\n- [Hexo 主题制作指南](http://www.360doc.com/content/16/0913/16/33651124_590545274.shtml#/)\n- [hexo原理浅析](https://segmentfault.com/a/1190000008784436)\n","slug":"hexo-4","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqcek00083gd4nkv3t0n2","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<p>一直在用 Hexo 写博客，但是对其原理并不是很清晰，在网上找了一些资料，对 Hexo 有了新的认识，现在就来记录一下</p>\n<a id=\"more\"></a>\n<h1 id=\"使用-Hexo-github-pages-搭建博客\"><a href=\"#使用-Hexo-github-pages-搭建博客\" class=\"headerlink\" title=\"使用 Hexo + github pages 搭建博客\"></a>使用 Hexo + github pages 搭建博客</h1><p>记得刚开始知道 Hexo + github pages 搭建博客是在 2016 年，那时候，闺蜜非常激动的给我说自己建了一个博客，然后给我发过来了一个地址，我打开之后感觉她技术好牛逼啊，这都可以做到（因为潜意识中，创建一个网址是需要很复杂的过程的，并且要让别人通过地址访问也是一个很麻烦甚至觉得很花钱的一件事情）。</p>\n<p>然后她给我说很简单，是用 Hexo + github pages 搭建的，当时是一脸懵逼啊，然后百度了一下，发现很多人都在使用 Hexo + github pages 搭建博客。</p>\n<p>拖延症的我又过了几个月才开始按照网上的教程一步一步的创建自己的博客。</p>\n<h2 id=\"github-的-pages-服务\"><a href=\"#github-的-pages-服务\" class=\"headerlink\" title=\"github 的 pages 服务\"></a>github 的 pages 服务</h2><p>开始只是按照网上的教程一步一步跟着做，将项目源码托管在 github 上，使用 github 的 pages 服务。其实 github 的 pages 服务不只是可以展示博客，你的每一个 github 仓库都有 pages 服务，可以通过简单的设置通过项目的 index.html 为入口展示你的项目，这一点也很实用啊有木有！但是大部分的 pages 服务都是用来搭建个人博客的。</p>\n<p>例如，我之前的 canvasStar 的项目，我将源码上传到了 github 上，然后如下设置：<br><img src=\"http://img.blog.csdn.net/20170811153556910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"pages服务第一步\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170811154125248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"pages服务第二步\"></p>\n<blockquote>\n<p>github pages支持静态页面的解析</p>\n</blockquote>\n<p>然后你就可以通过图中红色框框圈出的地址来访问。</p>\n<h2 id=\"coding-的-pages-服务\"><a href=\"#coding-的-pages-服务\" class=\"headerlink\" title=\"coding 的 pages 服务\"></a>coding 的 pages 服务</h2><p>在初创博客的时候，是将代码放在 github 上，然后通过 pages 访问，然后了解到国内访问 github 速度还是慢一些，并且 github 不会被百度收录，不利于 SEO，所以又将代码托管到了 coding 上，coding 也有类似的 pages 服务。也用了一段时间，但是 coding 现在不升级为会员打开有广告。于是就自己买了个虚拟主机，将代码直接放在了虚拟主机上。</p>\n<h2 id=\"为什么使用-Hexo-github-pages-搭建博客\"><a href=\"#为什么使用-Hexo-github-pages-搭建博客\" class=\"headerlink\" title=\"为什么使用 Hexo + github pages 搭建博客\"></a>为什么使用 Hexo + github pages 搭建博客</h2><p>Hexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用 coding 的 pages 服务，如果自己有服务器的话，可以上传到自己的服务器）。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>使用 Hexo + github pages 搭建博客，刚刚我们简单介绍了 github pages，那么现在我们就该介绍一下 Hexo，我们了解到 Hexo 是用来生成 HTML 的，那么这篇文章我们就主要来讲一下 Hexo 是怎样生成 HTML 的。</p>\n<h2 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h2><p><img src=\"http://img.blog.csdn.net/20170811161953548?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"hexo官网\"><br>在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：<strong>快速、简洁且高效的博客框架</strong></p>\n<p>在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>在官方文档中安装了 Hexo 中我们就安装了 Hexo，然后我们就可以看到文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml      // 站点配置文件</span><br><span class=\"line\">├── db.json          // 缓存文件</span><br><span class=\"line\">├── node_modules     // 安装的插件以及hexo所需的一些nodejs模块</span><br><span class=\"line\">├── package.json     // 项目的依赖文件</span><br><span class=\"line\">├── scaffolds        // 模版文件</span><br><span class=\"line\">├── source           // 源文件，用来存放你的文章 md 文件</span><br><span class=\"line\">└── themes           // 主题文件</span><br></pre></td></tr></table></figure></p>\n<p>然后我们可以安装主题，比我我安装的 NexT 主题，安装完之后会在 <code>themes</code> 下面产生一个 next 文件存放主题中的内容，文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.en.md       // READEME 英文版</span><br><span class=\"line\">├── README.md          // READEME 中文文件</span><br><span class=\"line\">├── _config.yml        // 主题配置文件</span><br><span class=\"line\">├── bower.json</span><br><span class=\"line\">├── gulpfile.coffee</span><br><span class=\"line\">├── languages         // 多语言配置文件</span><br><span class=\"line\">├── layout            // 模板文件</span><br><span class=\"line\">├── package.json      // 项目的依赖文件</span><br><span class=\"line\">├── scripts           // 主题的脚本文件</span><br><span class=\"line\">├── source            // 主题的资源文件 CSS IMG</span><br><span class=\"line\">└── test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo-的工作原理\"><a href=\"#Hexo-的工作原理\" class=\"headerlink\" title=\"Hexo 的工作原理\"></a>Hexo 的工作原理</h2><p>这里我们来分析一下 Hexo 每次部署的流程</p>\n<ol>\n<li>hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubild</code> 文件夹中，此时的 <code>publid</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</li>\n<li>hexo d：部署文件。部署主要是根据在 <code>_config.yml</code> 中配置的 <code>git</code> 仓库或者 <code>coding</code> 的地址，将 <code>public</code> 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 <code>public</code> 文件上传至你自己的服务器上。</li>\n</ol>\n<h1 id=\"Hexo-的模板引擎\"><a href=\"#Hexo-的模板引擎\" class=\"headerlink\" title=\"Hexo 的模板引擎\"></a>Hexo 的模板引擎</h1><blockquote>\n<p>模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p>\n</blockquote>\n<p>我们可以注意到，在 Hexo 中，<code>source</code> 文件夹和 <code>themes</code> 文件夹是在同级的，我们就可以将 <code>source</code> 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 <code>hexo g</code> 就将我们的数据和界面相结合生成静态文件 <code>public</code>。</p>\n<p>Hexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。</p>\n<p>模板文件在 <code>layout</code> 文件夹下，<code>layout</code> 文件文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _custom                           // 通用布局</span><br><span class=\"line\">├── _layout.swig                      // 默认布局布局</span><br><span class=\"line\">├── _macro                            // 插件模板</span><br><span class=\"line\">├── _partials                         // 局部布局</span><br><span class=\"line\">├── _scripts                          // script模板</span><br><span class=\"line\">├── _third-party                      // 第三方插件模板</span><br><span class=\"line\">├── archive.swig                      // 归档模板</span><br><span class=\"line\">├── category.swig                     // 分类模板</span><br><span class=\"line\">├── index.swig                        // 首页模板</span><br><span class=\"line\">├── page.swig                         // 其他模板</span><br><span class=\"line\">├── photo.swig                        // 照片模板（自定义）</span><br><span class=\"line\">├── post.swig                         // 文章模板</span><br><span class=\"line\">├── schedule.swig                     // 归档模板</span><br><span class=\"line\">└── tag.swig                          // 标签模板</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n</blockquote>\n<p>在我们新建页面或者新建文章的使用可以选定我们使用的模板。<code>hexo new [layout] &lt;title&gt;</code>就会使用对应的模板。</p>\n<p>其中 <code>_layout.swig</code> 是通用模板，里面引入了 <code>head</code>、<code>footer</code> 等公共组件，然后在其他的模板中会引入这个 <code>_layout.swig</code> 通用模板，比如 <code>post.swig</code> 模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_class %&#125;page-post-detail&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;post-spread&quot;&gt;</span><br><span class=\"line\">      &#123;% if theme.jiathis %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/jiathis.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.baidushare %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/baidushare.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.add_this_id %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/add-this.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/duoshuo_share.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block sidebar %&#125;</span><br><span class=\"line\">  &#123;&#123; sidebar_template.render(true) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block script_extra %&#125;</span><br><span class=\"line\">  &#123;% include &apos;_scripts/pages/post-details.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中在第 11 行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125; </span><br><span class=\"line\">    // 中间为该模板自定义内容</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据的填充\"><a href=\"#数据的填充\" class=\"headerlink\" title=\"数据的填充\"></a>数据的填充</h1><p>数据的填充主要是 <code>hexo -g</code> 的时候将数据传递给 swig 模板，然后再由 swig 模板填充到 HTML 中。</p>\n<h2 id=\"配置文件中的数据\"><a href=\"#配置文件中的数据\" class=\"headerlink\" title=\"配置文件中的数据\"></a>配置文件中的数据</h2><p>Hexo 的配置文件 <code>_config.yml</code> 使用 <a href=\"http://docs.ansible.com/ansible/latest/YAMLSyntax.html\" target=\"_blank\" rel=\"noopener\">yml语法</a> 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组，</p>\n<h2 id=\"配置文件中数据的使用\"><a href=\"#配置文件中数据的使用\" class=\"headerlink\" title=\"配置文件中数据的使用\"></a>配置文件中数据的使用</h2><p>如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 swig 中直接使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo-中的变量\"><a href=\"#Hexo-中的变量\" class=\"headerlink\" title=\"Hexo 中的变量\"></a>Hexo 中的变量</h2><p>Hexo 提供了很多的变量，比如我们上面使用的 <code>page</code> 变量，还有 <code>site</code> 变量等，这些都是 Hexo 提供的，我们可以拿来直接使用的，常用的变量有：</p>\n<ul>\n<li><code>site</code>：对应整个网站的变量，一般会用到 <code>site.posts.length</code> 制作分页器。<ul>\n<li><code>site.posts</code> 所有文章</li>\n<li><code>site.pages</code> 所有分页</li>\n<li><code>site.categories</code> 所有分类</li>\n<li><code>site.tags</code> 所有标签</li>\n</ul>\n</li>\n<li><code>page</code>：存放当前页面的信息，例如我在 <code>index.ejs</code> 中使用 <code>page.posts</code> 获取了当前页面的所有文章而不是使用 <code>site.posts</code>。</li>\n<li><code>config</code>：<code>config</code> 变量我们在主目录下配置文件 <code>_config.yml</code> 中保存的信息。</li>\n<li><code>theme</code>：<code>theme</code> 变量是我们在主题目录下配置文件 <code>_config.yml</code> 中保存的信息。</li>\n<li><code>path</code>：当前页面的路径（不含根路径）。</li>\n<li><code>url</code>：页面完整网址。</li>\n</ul>\n<h3 id=\"页面变量\"><a href=\"#页面变量\" class=\"headerlink\" title=\"页面变量\"></a>页面变量</h3><p>Page(page) 这里指的是 <code>hexo new page</code> 创建的那个页面</p>\n<ul>\n<li><code>page.title</code>：文章标题</li>\n<li><code>page.date</code>：文章建立日期</li>\n<li><code>page.updated</code>：文章更新日期</li>\n<li><code>page.comments</code>：留言是否开启</li>\n<li><code>page.layout</code>：布局名称</li>\n<li><code>page.content</code>：文章完整内容</li>\n<li><code>page.excerpt</code>：文章摘要</li>\n<li><code>page.more</code>：除了摘要的其他内容</li>\n<li><code>page.source</code>：文章原始路劲</li>\n<li><code>page.full_source</code>：文章完整原始路径</li>\n<li><code>page.path</code>：文章网址（不含根路径），通常在主题中使用url_for(page.path)</li>\n<li><code>page.permalink</code>：文章永久网址</li>\n<li><code>page.prev</code>：上一篇文章，如果此为第一篇文章则为null</li>\n<li><code>page.next</code>：下一篇文章，如果此为最后一篇文章则为null</li>\n<li><code>page.raw</code>：文章原始内容</li>\n<li><code>page.photos</code>：文章的照片（用于相册）</li>\n<li><code>page.link</code>：文章的外链（用于链接文章）</li>\n</ul>\n<h3 id=\"Post-post-变量\"><a href=\"#Post-post-变量\" class=\"headerlink\" title=\"Post(post) 变量\"></a>Post(post) 变量</h3><p>这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<ul>\n<li><code>page.pulished</code>：文章非草稿为true</li>\n<li><code>page.categories</code>：文章分类</li>\n<li><code>page.tags</code>：文章标签</li>\n</ul>\n<h3 id=\"首页-index\"><a href=\"#首页-index\" class=\"headerlink\" title=\"首页(index)\"></a>首页(index)</h3><ul>\n<li><code>page.per_page</code>：每一页显示的文章数</li>\n<li><code>page.total</code>：文章数量</li>\n<li><code>page.current</code>：当前页码</li>\n<li><code>page.current_url</code>：当前页的URL</li>\n<li><code>page.posts</code>：当前页的文章</li>\n<li><code>page.prev</code>：前一页页码，如果为第一页，该值为0</li>\n<li><code>page.prev_link</code>：前一页URL，如果为第一页，则为’’</li>\n<li><code>page.next</code>：后一页页码，如果为最后一页，则为0</li>\n<li><code>page.next_link</code>：后一页URL，如果为最后一页，则为’’</li>\n<li><code>page.path</code>：当前页网址（不含根路径），通常在主题中使用url_for(page.path)</li>\n</ul>\n<h3 id=\"归档页-archive\"><a href=\"#归档页-archive\" class=\"headerlink\" title=\"归档页(archive)\"></a>归档页(archive)</h3><p>与index布局相同，但是新增如下变量：</p>\n<ul>\n<li><code>archive</code> 为true</li>\n<li><code>year</code> 归档年份（4位）</li>\n<li><code>month</code> 归档月份（不包含0）</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。</p>\n<p>再深入一点讲 Hexo 的原理的话，那就应该是使用 <a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\" target=\"_blank\" rel=\"noopener\">yaml 语言</a> 做配置文件，使用 <a href=\"http://www.360doc.com/content/16/0115/10/597197_528136785.shtml\" target=\"_blank\" rel=\"noopener\">ejs</a> 或者 <a href=\"https://www.ibm.com/developerworks/cn/aix/library/au-swig/\" target=\"_blank\" rel=\"noopener\">swig</a> 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。</p>\n<h1 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h1><ul>\n<li><a href=\"http://www.ituring.com.cn/article/199295\" target=\"_blank\" rel=\"noopener\">Hexo Docs</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006057336\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a></li>\n<li><a href=\"http://www.360doc.com/content/16/0913/16/33651124_590545274.shtml#/\" target=\"_blank\" rel=\"noopener\">Hexo 主题制作指南</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008784436\" target=\"_blank\" rel=\"noopener\">hexo原理浅析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<p>一直在用 Hexo 写博客，但是对其原理并不是很清晰，在网上找了一些资料，对 Hexo 有了新的认识，现在就来记录一下</p>","more":"<h1 id=\"使用-Hexo-github-pages-搭建博客\"><a href=\"#使用-Hexo-github-pages-搭建博客\" class=\"headerlink\" title=\"使用 Hexo + github pages 搭建博客\"></a>使用 Hexo + github pages 搭建博客</h1><p>记得刚开始知道 Hexo + github pages 搭建博客是在 2016 年，那时候，闺蜜非常激动的给我说自己建了一个博客，然后给我发过来了一个地址，我打开之后感觉她技术好牛逼啊，这都可以做到（因为潜意识中，创建一个网址是需要很复杂的过程的，并且要让别人通过地址访问也是一个很麻烦甚至觉得很花钱的一件事情）。</p>\n<p>然后她给我说很简单，是用 Hexo + github pages 搭建的，当时是一脸懵逼啊，然后百度了一下，发现很多人都在使用 Hexo + github pages 搭建博客。</p>\n<p>拖延症的我又过了几个月才开始按照网上的教程一步一步的创建自己的博客。</p>\n<h2 id=\"github-的-pages-服务\"><a href=\"#github-的-pages-服务\" class=\"headerlink\" title=\"github 的 pages 服务\"></a>github 的 pages 服务</h2><p>开始只是按照网上的教程一步一步跟着做，将项目源码托管在 github 上，使用 github 的 pages 服务。其实 github 的 pages 服务不只是可以展示博客，你的每一个 github 仓库都有 pages 服务，可以通过简单的设置通过项目的 index.html 为入口展示你的项目，这一点也很实用啊有木有！但是大部分的 pages 服务都是用来搭建个人博客的。</p>\n<p>例如，我之前的 canvasStar 的项目，我将源码上传到了 github 上，然后如下设置：<br><img src=\"http://img.blog.csdn.net/20170811153556910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"pages服务第一步\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170811154125248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"pages服务第二步\"></p>\n<blockquote>\n<p>github pages支持静态页面的解析</p>\n</blockquote>\n<p>然后你就可以通过图中红色框框圈出的地址来访问。</p>\n<h2 id=\"coding-的-pages-服务\"><a href=\"#coding-的-pages-服务\" class=\"headerlink\" title=\"coding 的 pages 服务\"></a>coding 的 pages 服务</h2><p>在初创博客的时候，是将代码放在 github 上，然后通过 pages 访问，然后了解到国内访问 github 速度还是慢一些，并且 github 不会被百度收录，不利于 SEO，所以又将代码托管到了 coding 上，coding 也有类似的 pages 服务。也用了一段时间，但是 coding 现在不升级为会员打开有广告。于是就自己买了个虚拟主机，将代码直接放在了虚拟主机上。</p>\n<h2 id=\"为什么使用-Hexo-github-pages-搭建博客\"><a href=\"#为什么使用-Hexo-github-pages-搭建博客\" class=\"headerlink\" title=\"为什么使用 Hexo + github pages 搭建博客\"></a>为什么使用 Hexo + github pages 搭建博客</h2><p>Hexo 是用来生成 HTML 的，github pages 用来展示 HTML（根据上面的介绍，我们可以理解我们还可以使用 coding 的 pages 服务，如果自己有服务器的话，可以上传到自己的服务器）。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>使用 Hexo + github pages 搭建博客，刚刚我们简单介绍了 github pages，那么现在我们就该介绍一下 Hexo，我们了解到 Hexo 是用来生成 HTML 的，那么这篇文章我们就主要来讲一下 Hexo 是怎样生成 HTML 的。</p>\n<h2 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h2><p><img src=\"http://img.blog.csdn.net/20170811161953548?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"hexo官网\"><br>在 Hexo 的官网，我们可以直观的看到对 Hexo 的介绍：<strong>快速、简洁且高效的博客框架</strong></p>\n<p>在 Hexo 的文档中，我们可以找到官方对 Hexo 的定义：</p>\n<blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<p>在官方文档中安装了 Hexo 中我们就安装了 Hexo，然后我们就可以看到文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml      // 站点配置文件</span><br><span class=\"line\">├── db.json          // 缓存文件</span><br><span class=\"line\">├── node_modules     // 安装的插件以及hexo所需的一些nodejs模块</span><br><span class=\"line\">├── package.json     // 项目的依赖文件</span><br><span class=\"line\">├── scaffolds        // 模版文件</span><br><span class=\"line\">├── source           // 源文件，用来存放你的文章 md 文件</span><br><span class=\"line\">└── themes           // 主题文件</span><br></pre></td></tr></table></figure></p>\n<p>然后我们可以安装主题，比我我安装的 NexT 主题，安装完之后会在 <code>themes</code> 下面产生一个 next 文件存放主题中的内容，文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.en.md       // READEME 英文版</span><br><span class=\"line\">├── README.md          // READEME 中文文件</span><br><span class=\"line\">├── _config.yml        // 主题配置文件</span><br><span class=\"line\">├── bower.json</span><br><span class=\"line\">├── gulpfile.coffee</span><br><span class=\"line\">├── languages         // 多语言配置文件</span><br><span class=\"line\">├── layout            // 模板文件</span><br><span class=\"line\">├── package.json      // 项目的依赖文件</span><br><span class=\"line\">├── scripts           // 主题的脚本文件</span><br><span class=\"line\">├── source            // 主题的资源文件 CSS IMG</span><br><span class=\"line\">└── test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo-的工作原理\"><a href=\"#Hexo-的工作原理\" class=\"headerlink\" title=\"Hexo 的工作原理\"></a>Hexo 的工作原理</h2><p>这里我们来分析一下 Hexo 每次部署的流程</p>\n<ol>\n<li>hexo g：生成静态文件。将我们的数据和界面相结合生成静态文件的过程。会遍历主题文件中的 <code>source</code> 文件夹（js、css、img 等静态资源），然后建立索引，然后根据索引生成 <code>pubild</code> 文件夹中，此时的 <code>publid</code> 文件是由 html、 js、css、img 建立的纯静态文件可以通过 <code>index.html</code> 作为入口访问你的博客。</li>\n<li>hexo d：部署文件。部署主要是根据在 <code>_config.yml</code> 中配置的 <code>git</code> 仓库或者 <code>coding</code> 的地址，将 <code>public</code> 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 <code>public</code> 文件上传至你自己的服务器上。</li>\n</ol>\n<h1 id=\"Hexo-的模板引擎\"><a href=\"#Hexo-的模板引擎\" class=\"headerlink\" title=\"Hexo 的模板引擎\"></a>Hexo 的模板引擎</h1><blockquote>\n<p>模板引擎的作用，就是将界面与数据分离。最简单的原理是将模板内容中指定的地方替换成数据，实现业务代码与逻辑代码分离。</p>\n</blockquote>\n<p>我们可以注意到，在 Hexo 中，<code>source</code> 文件夹和 <code>themes</code> 文件夹是在同级的，我们就可以将 <code>source</code> 文件夹理解为数据库，而主题文件夹相当于 界面。然后我们 <code>hexo g</code> 就将我们的数据和界面相结合生成静态文件 <code>public</code>。</p>\n<p>Hexo 的模板引擎是默认使用 ejs 编写的。hexo首先会解析 md 文件，然后根据 layout 判断布局类型，再调用其他的文件，这样每一块的内容都是独立的，提高代码的复用性。最终会生成一个 html 页面。</p>\n<p>模板文件在 <code>layout</code> 文件夹下，<code>layout</code> 文件文档结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _custom                           // 通用布局</span><br><span class=\"line\">├── _layout.swig                      // 默认布局布局</span><br><span class=\"line\">├── _macro                            // 插件模板</span><br><span class=\"line\">├── _partials                         // 局部布局</span><br><span class=\"line\">├── _scripts                          // script模板</span><br><span class=\"line\">├── _third-party                      // 第三方插件模板</span><br><span class=\"line\">├── archive.swig                      // 归档模板</span><br><span class=\"line\">├── category.swig                     // 分类模板</span><br><span class=\"line\">├── index.swig                        // 首页模板</span><br><span class=\"line\">├── page.swig                         // 其他模板</span><br><span class=\"line\">├── photo.swig                        // 照片模板（自定义）</span><br><span class=\"line\">├── post.swig                         // 文章模板</span><br><span class=\"line\">├── schedule.swig                     // 归档模板</span><br><span class=\"line\">└── tag.swig                          // 标签模板</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>每个模板都默认使用layout布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n</blockquote>\n<p>在我们新建页面或者新建文章的使用可以选定我们使用的模板。<code>hexo new [layout] &lt;title&gt;</code>就会使用对应的模板。</p>\n<p>其中 <code>_layout.swig</code> 是通用模板，里面引入了 <code>head</code>、<code>footer</code> 等公共组件，然后在其他的模板中会引入这个 <code>_layout.swig</code> 通用模板，比如 <code>post.swig</code> 模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/post.swig&apos; as post_template %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block page_class %&#125;page-post-detail&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;post-spread&quot;&gt;</span><br><span class=\"line\">      &#123;% if theme.jiathis %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/jiathis.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.baidushare %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/baidushare.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.add_this_id %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/add-this.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><br><span class=\"line\">        &#123;% include &apos;_partials/share/duoshuo_share.swig&apos; %&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block sidebar %&#125;</span><br><span class=\"line\">  &#123;&#123; sidebar_template.render(true) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block script_extra %&#125;</span><br><span class=\"line\">  &#123;% include &apos;_scripts/pages/post-details.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中在第 11 行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125; </span><br><span class=\"line\">    // 中间为该模板自定义内容</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据的填充\"><a href=\"#数据的填充\" class=\"headerlink\" title=\"数据的填充\"></a>数据的填充</h1><p>数据的填充主要是 <code>hexo -g</code> 的时候将数据传递给 swig 模板，然后再由 swig 模板填充到 HTML 中。</p>\n<h2 id=\"配置文件中的数据\"><a href=\"#配置文件中的数据\" class=\"headerlink\" title=\"配置文件中的数据\"></a>配置文件中的数据</h2><p>Hexo 的配置文件 <code>_config.yml</code> 使用 <a href=\"http://docs.ansible.com/ansible/latest/YAMLSyntax.html\" target=\"_blank\" rel=\"noopener\">yml语法</a> 。例如博客的名字、副标题等等之类。这些数据项组织在 config 对象中。可以数字、字符串、对象、数组，</p>\n<h2 id=\"配置文件中数据的使用\"><a href=\"#配置文件中数据的使用\" class=\"headerlink\" title=\"配置文件中数据的使用\"></a>配置文件中数据的使用</h2><p>如果要在模板中使用某个具体的值，比如字符串、数字、逻辑变量或者对象的某个成员，可以在主题的模板文件 swig 中直接使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block title %&#125; &#123;&#123; page.title &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Hexo-中的变量\"><a href=\"#Hexo-中的变量\" class=\"headerlink\" title=\"Hexo 中的变量\"></a>Hexo 中的变量</h2><p>Hexo 提供了很多的变量，比如我们上面使用的 <code>page</code> 变量，还有 <code>site</code> 变量等，这些都是 Hexo 提供的，我们可以拿来直接使用的，常用的变量有：</p>\n<ul>\n<li><code>site</code>：对应整个网站的变量，一般会用到 <code>site.posts.length</code> 制作分页器。<ul>\n<li><code>site.posts</code> 所有文章</li>\n<li><code>site.pages</code> 所有分页</li>\n<li><code>site.categories</code> 所有分类</li>\n<li><code>site.tags</code> 所有标签</li>\n</ul>\n</li>\n<li><code>page</code>：存放当前页面的信息，例如我在 <code>index.ejs</code> 中使用 <code>page.posts</code> 获取了当前页面的所有文章而不是使用 <code>site.posts</code>。</li>\n<li><code>config</code>：<code>config</code> 变量我们在主目录下配置文件 <code>_config.yml</code> 中保存的信息。</li>\n<li><code>theme</code>：<code>theme</code> 变量是我们在主题目录下配置文件 <code>_config.yml</code> 中保存的信息。</li>\n<li><code>path</code>：当前页面的路径（不含根路径）。</li>\n<li><code>url</code>：页面完整网址。</li>\n</ul>\n<h3 id=\"页面变量\"><a href=\"#页面变量\" class=\"headerlink\" title=\"页面变量\"></a>页面变量</h3><p>Page(page) 这里指的是 <code>hexo new page</code> 创建的那个页面</p>\n<ul>\n<li><code>page.title</code>：文章标题</li>\n<li><code>page.date</code>：文章建立日期</li>\n<li><code>page.updated</code>：文章更新日期</li>\n<li><code>page.comments</code>：留言是否开启</li>\n<li><code>page.layout</code>：布局名称</li>\n<li><code>page.content</code>：文章完整内容</li>\n<li><code>page.excerpt</code>：文章摘要</li>\n<li><code>page.more</code>：除了摘要的其他内容</li>\n<li><code>page.source</code>：文章原始路劲</li>\n<li><code>page.full_source</code>：文章完整原始路径</li>\n<li><code>page.path</code>：文章网址（不含根路径），通常在主题中使用url_for(page.path)</li>\n<li><code>page.permalink</code>：文章永久网址</li>\n<li><code>page.prev</code>：上一篇文章，如果此为第一篇文章则为null</li>\n<li><code>page.next</code>：下一篇文章，如果此为最后一篇文章则为null</li>\n<li><code>page.raw</code>：文章原始内容</li>\n<li><code>page.photos</code>：文章的照片（用于相册）</li>\n<li><code>page.link</code>：文章的外链（用于链接文章）</li>\n</ul>\n<h3 id=\"Post-post-变量\"><a href=\"#Post-post-变量\" class=\"headerlink\" title=\"Post(post) 变量\"></a>Post(post) 变量</h3><p>这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<ul>\n<li><code>page.pulished</code>：文章非草稿为true</li>\n<li><code>page.categories</code>：文章分类</li>\n<li><code>page.tags</code>：文章标签</li>\n</ul>\n<h3 id=\"首页-index\"><a href=\"#首页-index\" class=\"headerlink\" title=\"首页(index)\"></a>首页(index)</h3><ul>\n<li><code>page.per_page</code>：每一页显示的文章数</li>\n<li><code>page.total</code>：文章数量</li>\n<li><code>page.current</code>：当前页码</li>\n<li><code>page.current_url</code>：当前页的URL</li>\n<li><code>page.posts</code>：当前页的文章</li>\n<li><code>page.prev</code>：前一页页码，如果为第一页，该值为0</li>\n<li><code>page.prev_link</code>：前一页URL，如果为第一页，则为’’</li>\n<li><code>page.next</code>：后一页页码，如果为最后一页，则为0</li>\n<li><code>page.next_link</code>：后一页URL，如果为最后一页，则为’’</li>\n<li><code>page.path</code>：当前页网址（不含根路径），通常在主题中使用url_for(page.path)</li>\n</ul>\n<h3 id=\"归档页-archive\"><a href=\"#归档页-archive\" class=\"headerlink\" title=\"归档页(archive)\"></a>归档页(archive)</h3><p>与index布局相同，但是新增如下变量：</p>\n<ul>\n<li><code>archive</code> 为true</li>\n<li><code>year</code> 归档年份（4位）</li>\n<li><code>month</code> 归档月份（不包含0）</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>非要说 Hexo 是什么的话，我觉得就是生成静态页面的工具，可以将我们使用 markdown 编写的内容与主题模板相结合，生成 HTML 静态文件。并且可以和 github 的 pages 或者其他可以将静态页面展现出来的服务（例如 coding 的 pages 服务）相结合，一键部署。</p>\n<p>再深入一点讲 Hexo 的原理的话，那就应该是使用 <a href=\"http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt\" target=\"_blank\" rel=\"noopener\">yaml 语言</a> 做配置文件，使用 <a href=\"http://www.360doc.com/content/16/0115/10/597197_528136785.shtml\" target=\"_blank\" rel=\"noopener\">ejs</a> 或者 <a href=\"https://www.ibm.com/developerworks/cn/aix/library/au-swig/\" target=\"_blank\" rel=\"noopener\">swig</a> 作为主题模板，与使用 markdown 书写的内容结合，生成静态 HTML 文件。</p>\n<h1 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h1><ul>\n<li><a href=\"http://www.ituring.com.cn/article/199295\" target=\"_blank\" rel=\"noopener\">Hexo Docs</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006057336\" target=\"_blank\" rel=\"noopener\">写一个自己的Hexo主题</a></li>\n<li><a href=\"http://www.360doc.com/content/16/0913/16/33651124_590545274.shtml#/\" target=\"_blank\" rel=\"noopener\">Hexo 主题制作指南</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008784436\" target=\"_blank\" rel=\"noopener\">hexo原理浅析</a></li>\n</ul>"},{"title":"Hexo 4：【高阶】NexT 主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能","date":"2017-04-09T14:32:30.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","source":"_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","raw":"---\ntitle: Hexo 4：【高阶】NexT 主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能\ndate: 2017-04-09 22:32:30\ntags: [Hexo,NexT主题,网易云音乐,动态背景,统计功能] \ncategories: [Hexo建站]\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","slug":"Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqcmx000z3gd48jmdpu8e","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"noopener\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\" target=\"_blank\" rel=\"noopener\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br><a id=\"more\"></a><br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .deploy</span><br><span class=\"line\">├── public</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .github            #git信息</span><br><span class=\"line\">├── languages          #多语言</span><br><span class=\"line\">|   ├── default.yml    #默认语言</span><br><span class=\"line\">|   └── zh-Hans.yml      #简体中文</span><br><span class=\"line\">|   └── zh-tw.yml      #繁体中文</span><br><span class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</span><br><span class=\"line\">|   |   ├── _header.swig    #头部样式</span><br><span class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</span><br><span class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</span><br><span class=\"line\">|   |   ├── post.swig    #文章模板</span><br><span class=\"line\">|   |   ├── reward.swig    #打赏模板</span><br><span class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class=\"line\">|   ├── _partial       #局部的布局</span><br><span class=\"line\">|   |   ├── head       #头部模板</span><br><span class=\"line\">|   |   ├── search     #搜索模板</span><br><span class=\"line\">|   |   ├── share      #分享模板</span><br><span class=\"line\">|   ├── _script        #局部的布局</span><br><span class=\"line\">|   ├── _third-party   #第三方模板</span><br><span class=\"line\">|   ├── _layout.swig   #主页面模板</span><br><span class=\"line\">|   ├── index.swig     #主页面模板</span><br><span class=\"line\">|   ├── page           #页面模板</span><br><span class=\"line\">|   └── tag.swig       #tag模板</span><br><span class=\"line\">├── scripts            #script源码</span><br><span class=\"line\">|   ├── tags           #tags的script源码</span><br><span class=\"line\">|   ├── marge.js       #页面模板</span><br><span class=\"line\">├── source             #源码</span><br><span class=\"line\">|   ├── css            #css源码</span><br><span class=\"line\">|   |   ├── _common    #*.styl基础css</span><br><span class=\"line\">|   |   ├── _custom    #*.styl局部css</span><br><span class=\"line\">|   |   └── _mixins    #mixins的css</span><br><span class=\"line\">|   ├── fonts          #字体</span><br><span class=\"line\">|   ├── images         #图片</span><br><span class=\"line\">|   ├── uploads        #添加的文件</span><br><span class=\"line\">|   └── js             #javascript源代码</span><br><span class=\"line\">├── _config.yml        #主题配置文件</span><br><span class=\"line\">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: photo</span><br><span class=\"line\">date: 2017-04-04 22:14:07</span><br><span class=\"line\">type: &quot;photo&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br><span class=\"line\">啦啦啦~</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"noopener\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Git使用中的报错情况</span><br><span class=\"line\">date: 2017-03-11 23:54:11</span><br><span class=\"line\">tags: [git,实战经验] </span><br><span class=\"line\">categories: git</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.jpg</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class=\"line\">avatar: /uploads/avatar.png</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\" target=\"_blank\" rel=\"noopener\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><blockquote>\n<p>2017.5.8更新，具体过程往下看<strong>仿知乎动态背景</strong><br>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # Canvas-nest</span><br><span class=\"line\">canvas_nest: true</span><br></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"noopener\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    //创建对象</span><br><span class=\"line\">    //以一个圆为对象</span><br><span class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</span><br><span class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</span><br><span class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">        this.r = Math.random() * 10 ;</span><br><span class=\"line\">        this._mx = Math.random() ;</span><br><span class=\"line\">        this._my = Math.random() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //canvas 画圆和画直线</span><br><span class=\"line\">    //画圆就是正常的用canvas画一个圆</span><br><span class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</span><br><span class=\"line\">    drawCircle(ctx) &#123;</span><br><span class=\"line\">        ctx.beginPath();</span><br><span class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span><br><span class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</span><br><span class=\"line\">        ctx.closePath();</span><br><span class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">        ctx.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    drawLine(ctx, _circle) &#123;</span><br><span class=\"line\">        let dx = this.x - _circle.x;</span><br><span class=\"line\">        let dy = this.y - _circle.y;</span><br><span class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</span><br><span class=\"line\">        if (d &lt; 150) &#123;</span><br><span class=\"line\">            ctx.beginPath();</span><br><span class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</span><br><span class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</span><br><span class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</span><br><span class=\"line\">            ctx.closePath();</span><br><span class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">            ctx.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 圆圈移动</span><br><span class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</span><br><span class=\"line\">    move(w, h) &#123;</span><br><span class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</span><br><span class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</span><br><span class=\"line\">        this.x += this._mx / 2;</span><br><span class=\"line\">        this.y += this._my / 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//鼠标点画圆闪烁变动</span><br><span class=\"line\">class currentCirle extends Circle &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        super(x, y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    drawCircle(ctx) &#123;</span><br><span class=\"line\">        ctx.beginPath();</span><br><span class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</span><br><span class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span><br><span class=\"line\">        this.r = 8;</span><br><span class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">        ctx.closePath();</span><br><span class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</span><br><span class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</span><br><span class=\"line\">        ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</span><br><span class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">let w = canvas.width = canvas.offsetWidth;</span><br><span class=\"line\">let h = canvas.height = canvas.offsetHeight;</span><br><span class=\"line\">let circles = [];</span><br><span class=\"line\">let current_circle = new currentCirle(0, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">let draw = function () &#123;</span><br><span class=\"line\">    ctx.clearRect(0, 0, w, h);</span><br><span class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">        circles[i].move(w, h);</span><br><span class=\"line\">        circles[i].drawCircle(ctx);</span><br><span class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</span><br><span class=\"line\">            circles[i].drawLine(ctx, circles[j])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (current_circle.x) &#123;</span><br><span class=\"line\">        current_circle.drawCircle(ctx);</span><br><span class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</span><br><span class=\"line\">            current_circle.drawLine(ctx, circles[k])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requestAnimationFrame(draw)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let init = function (num) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</span><br><span class=\"line\">window.onmousemove = function (e) &#123;</span><br><span class=\"line\">    e = e || window.event;</span><br><span class=\"line\">    current_circle.x = e.clientX;</span><br><span class=\"line\">    current_circle.y = e.clientY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onmouseout = function () &#123;</span><br><span class=\"line\">    current_circle.x = null;</span><br><span class=\"line\">    current_circle.y = null;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"仿知乎动态背景\"><a href=\"#仿知乎动态背景\" class=\"headerlink\" title=\"仿知乎动态背景\"></a>仿知乎动态背景</h1><hr>\n<blockquote>\n<p>2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新<br>，完整步骤如下</p>\n</blockquote>\n<p>1：首先在主题文件的layout中的_layout.swig<code>C:\\Hexo\\themes\\next\\layout\\_layout.swig</code>中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div class=&quot;bg_content&quot;&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">   function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function _inherits(subClass, superClass) &#123; if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123; throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   var Circle = function () &#123;</span><br><span class=\"line\">      function Circle(x, y) &#123;</span><br><span class=\"line\">           _classCallCheck(this, Circle);</span><br><span class=\"line\"></span><br><span class=\"line\">           this.x = x;</span><br><span class=\"line\">           this.y = y;</span><br><span class=\"line\">           this.r = Math.random() * 10;</span><br><span class=\"line\">           this._mx = Math.random();</span><br><span class=\"line\">           this._my = Math.random();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      _createClass(Circle, [&#123;</span><br><span class=\"line\">           key: &apos;drawCircle&apos;,</span><br><span class=\"line\">           value: function drawCircle(ctx) &#123;</span><br><span class=\"line\">               ctx.beginPath();</span><br><span class=\"line\">               //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span><br><span class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">               ctx.closePath();</span><br><span class=\"line\">               ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">               ctx.fill();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;, &#123;</span><br><span class=\"line\">           key: &apos;drawLine&apos;,</span><br><span class=\"line\">           value: function drawLine(ctx, _circle) &#123;</span><br><span class=\"line\">               var dx = this.x - _circle.x;</span><br><span class=\"line\">               var dy = this.y - _circle.y;</span><br><span class=\"line\">               var d = Math.sqrt(dx * dx + dy * dy);</span><br><span class=\"line\">               if (d &lt; 150) &#123;</span><br><span class=\"line\">                   ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">                   ctx.moveTo(this.x, this.y); //起始点</span><br><span class=\"line\">                   ctx.lineTo(_circle.x, _circle.y); //终点</span><br><span class=\"line\">                   ctx.closePath();</span><br><span class=\"line\">                   ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">                   ctx.stroke();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;, &#123;</span><br><span class=\"line\">           key: &apos;move&apos;,</span><br><span class=\"line\">           value: function move(w, h) &#123;</span><br><span class=\"line\">               this._mx = this.x &lt; w &amp;&amp; this.x &gt; 0 ? this._mx : -this._mx;</span><br><span class=\"line\">               this._my = this.y &lt; h &amp;&amp; this.y &gt; 0 ? this._my : -this._my;</span><br><span class=\"line\">               this.x += this._mx / 2;</span><br><span class=\"line\">               this.y += this._my / 2;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">       return Circle;</span><br><span class=\"line\">   &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   var currentCirle = function (_Circle) &#123;</span><br><span class=\"line\">       _inherits(currentCirle, _Circle);</span><br><span class=\"line\"></span><br><span class=\"line\">       function currentCirle(x, y) &#123;</span><br><span class=\"line\">           _classCallCheck(this, currentCirle);</span><br><span class=\"line\"></span><br><span class=\"line\">           return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       _createClass(currentCirle, [&#123;</span><br><span class=\"line\">           key: &apos;drawCircle&apos;,</span><br><span class=\"line\">           value: function drawCircle(ctx) &#123;</span><br><span class=\"line\">               ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">               //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span><br><span class=\"line\">               this.r = 8;</span><br><span class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">               ctx.closePath();</span><br><span class=\"line\">               //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</span><br><span class=\"line\">               ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;;</span><br><span class=\"line\">               ctx.fill();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">       return currentCirle;</span><br><span class=\"line\">   &#125;(Circle);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class=\"line\">   var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">   var w = canvas.width = canvas.offsetWidth;</span><br><span class=\"line\">   var h = canvas.height = canvas.offsetHeight;</span><br><span class=\"line\">   var circles = [];</span><br><span class=\"line\">   var current_circle = new currentCirle(0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">   var draw = function draw() &#123;</span><br><span class=\"line\">       ctx.clearRect(0, 0, w, h);</span><br><span class=\"line\">       for (var i = 0; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">           circles[i].move(w, h);</span><br><span class=\"line\">           circles[i].drawCircle(ctx);</span><br><span class=\"line\">           for (j = i + 1; j &lt; circles.length; j++) &#123;</span><br><span class=\"line\">               circles[i].drawLine(ctx, circles[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (current_circle.x) &#123;</span><br><span class=\"line\">           current_circle.drawCircle(ctx);</span><br><span class=\"line\">           for (var k = 1; k &lt; circles.length; k++) &#123;</span><br><span class=\"line\">               current_circle.drawLine(ctx, circles[k]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       requestAnimationFrame(draw);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var init = function init(num) &#123;</span><br><span class=\"line\">       for (var i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">           circles.push(new Circle(Math.random() * w, Math.random() * h));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       draw();</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   window.addEventListener(&apos;load&apos;, init(60));</span><br><span class=\"line\">   window.onmousemove = function (e) &#123;</span><br><span class=\"line\">       e = e || window.event;</span><br><span class=\"line\">       current_circle.x = e.clientX;</span><br><span class=\"line\">       current_circle.y = e.clientY;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   window.onmouseout = function () &#123;</span><br><span class=\"line\">       current_circle.x = null;</span><br><span class=\"line\">       current_circle.y = null;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>2：在主题文件的<code>C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl</code>文件中加上css代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*设置背景*/</span><br><span class=\"line\">.bg_content&#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#canvas&#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*将头部背景变为透明*/</span><br><span class=\"line\">.header&#123;</span><br><span class=\"line\">  background: transparent ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</span><br><span class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</span><br><span class=\"line\">    &lt;/iframe&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true</span><br><span class=\"line\">  min2read: true</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Show number of visitors to each article.</span><br><span class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  app_id: yourapp_id</span><br><span class=\"line\">  app_key: yourapp_key</span><br></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\" target=\"_blank\" rel=\"noopener\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site   站点信息</span><br><span class=\"line\">title: Cherry&apos;s Blog    #站点名字</span><br><span class=\"line\">subtitle: To Be a Batter Me  #副标题</span><br><span class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</span><br><span class=\"line\">author: Cherry   #博主名字</span><br><span class=\"line\">email: 991939332@qq.com #联系邮箱</span><br><span class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"noopener\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\" target=\"_blank\" rel=\"noopener\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br>","more":"<br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── .deploy</span><br><span class=\"line\">├── public</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">├── themes</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── .github            #git信息</span><br><span class=\"line\">├── languages          #多语言</span><br><span class=\"line\">|   ├── default.yml    #默认语言</span><br><span class=\"line\">|   └── zh-Hans.yml      #简体中文</span><br><span class=\"line\">|   └── zh-tw.yml      #繁体中文</span><br><span class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</span><br><span class=\"line\">|   |   ├── _header.swig    #头部样式</span><br><span class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</span><br><span class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</span><br><span class=\"line\">|   |   ├── post.swig    #文章模板</span><br><span class=\"line\">|   |   ├── reward.swig    #打赏模板</span><br><span class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class=\"line\">|   ├── _partial       #局部的布局</span><br><span class=\"line\">|   |   ├── head       #头部模板</span><br><span class=\"line\">|   |   ├── search     #搜索模板</span><br><span class=\"line\">|   |   ├── share      #分享模板</span><br><span class=\"line\">|   ├── _script        #局部的布局</span><br><span class=\"line\">|   ├── _third-party   #第三方模板</span><br><span class=\"line\">|   ├── _layout.swig   #主页面模板</span><br><span class=\"line\">|   ├── index.swig     #主页面模板</span><br><span class=\"line\">|   ├── page           #页面模板</span><br><span class=\"line\">|   └── tag.swig       #tag模板</span><br><span class=\"line\">├── scripts            #script源码</span><br><span class=\"line\">|   ├── tags           #tags的script源码</span><br><span class=\"line\">|   ├── marge.js       #页面模板</span><br><span class=\"line\">├── source             #源码</span><br><span class=\"line\">|   ├── css            #css源码</span><br><span class=\"line\">|   |   ├── _common    #*.styl基础css</span><br><span class=\"line\">|   |   ├── _custom    #*.styl局部css</span><br><span class=\"line\">|   |   └── _mixins    #mixins的css</span><br><span class=\"line\">|   ├── fonts          #字体</span><br><span class=\"line\">|   ├── images         #图片</span><br><span class=\"line\">|   ├── uploads        #添加的文件</span><br><span class=\"line\">|   └── js             #javascript源代码</span><br><span class=\"line\">├── _config.yml        #主题配置文件</span><br><span class=\"line\">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: photo</span><br><span class=\"line\">date: 2017-04-04 22:14:07</span><br><span class=\"line\">type: &quot;photo&quot;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br><span class=\"line\">啦啦啦~</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"noopener\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Git使用中的报错情况</span><br><span class=\"line\">date: 2017-03-11 23:54:11</span><br><span class=\"line\">tags: [git,实战经验] </span><br><span class=\"line\">categories: git</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.jpg</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class=\"line\">avatar: /uploads/avatar.png</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\" target=\"_blank\" rel=\"noopener\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><blockquote>\n<p>2017.5.8更新，具体过程往下看<strong>仿知乎动态背景</strong><br>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # Canvas-nest</span><br><span class=\"line\">canvas_nest: true</span><br></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"noopener\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">class Circle &#123;</span><br><span class=\"line\">    //创建对象</span><br><span class=\"line\">    //以一个圆为对象</span><br><span class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</span><br><span class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</span><br><span class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">        this.r = Math.random() * 10 ;</span><br><span class=\"line\">        this._mx = Math.random() ;</span><br><span class=\"line\">        this._my = Math.random() ;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //canvas 画圆和画直线</span><br><span class=\"line\">    //画圆就是正常的用canvas画一个圆</span><br><span class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</span><br><span class=\"line\">    drawCircle(ctx) &#123;</span><br><span class=\"line\">        ctx.beginPath();</span><br><span class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span><br><span class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</span><br><span class=\"line\">        ctx.closePath();</span><br><span class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">        ctx.fill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    drawLine(ctx, _circle) &#123;</span><br><span class=\"line\">        let dx = this.x - _circle.x;</span><br><span class=\"line\">        let dy = this.y - _circle.y;</span><br><span class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</span><br><span class=\"line\">        if (d &lt; 150) &#123;</span><br><span class=\"line\">            ctx.beginPath();</span><br><span class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</span><br><span class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</span><br><span class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</span><br><span class=\"line\">            ctx.closePath();</span><br><span class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">            ctx.stroke();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 圆圈移动</span><br><span class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</span><br><span class=\"line\">    move(w, h) &#123;</span><br><span class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</span><br><span class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</span><br><span class=\"line\">        this.x += this._mx / 2;</span><br><span class=\"line\">        this.y += this._my / 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//鼠标点画圆闪烁变动</span><br><span class=\"line\">class currentCirle extends Circle &#123;</span><br><span class=\"line\">    constructor(x, y) &#123;</span><br><span class=\"line\">        super(x, y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    drawCircle(ctx) &#123;</span><br><span class=\"line\">        ctx.beginPath();</span><br><span class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</span><br><span class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span><br><span class=\"line\">        this.r = 8;</span><br><span class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">        ctx.closePath();</span><br><span class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</span><br><span class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</span><br><span class=\"line\">        ctx.fill();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</span><br><span class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">let w = canvas.width = canvas.offsetWidth;</span><br><span class=\"line\">let h = canvas.height = canvas.offsetHeight;</span><br><span class=\"line\">let circles = [];</span><br><span class=\"line\">let current_circle = new currentCirle(0, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">let draw = function () &#123;</span><br><span class=\"line\">    ctx.clearRect(0, 0, w, h);</span><br><span class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">        circles[i].move(w, h);</span><br><span class=\"line\">        circles[i].drawCircle(ctx);</span><br><span class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</span><br><span class=\"line\">            circles[i].drawLine(ctx, circles[j])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (current_circle.x) &#123;</span><br><span class=\"line\">        current_circle.drawCircle(ctx);</span><br><span class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</span><br><span class=\"line\">            current_circle.drawLine(ctx, circles[k])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requestAnimationFrame(draw)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let init = function (num) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</span><br><span class=\"line\">window.onmousemove = function (e) &#123;</span><br><span class=\"line\">    e = e || window.event;</span><br><span class=\"line\">    current_circle.x = e.clientX;</span><br><span class=\"line\">    current_circle.y = e.clientY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onmouseout = function () &#123;</span><br><span class=\"line\">    current_circle.x = null;</span><br><span class=\"line\">    current_circle.y = null;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"仿知乎动态背景\"><a href=\"#仿知乎动态背景\" class=\"headerlink\" title=\"仿知乎动态背景\"></a>仿知乎动态背景</h1><hr>\n<blockquote>\n<p>2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新<br>，完整步骤如下</p>\n</blockquote>\n<p>1：首先在主题文件的layout中的_layout.swig<code>C:\\Hexo\\themes\\next\\layout\\_layout.swig</code>中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div class=&quot;bg_content&quot;&gt;</span><br><span class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">   function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function _inherits(subClass, superClass) &#123; if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123; throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   var Circle = function () &#123;</span><br><span class=\"line\">      function Circle(x, y) &#123;</span><br><span class=\"line\">           _classCallCheck(this, Circle);</span><br><span class=\"line\"></span><br><span class=\"line\">           this.x = x;</span><br><span class=\"line\">           this.y = y;</span><br><span class=\"line\">           this.r = Math.random() * 10;</span><br><span class=\"line\">           this._mx = Math.random();</span><br><span class=\"line\">           this._my = Math.random();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      _createClass(Circle, [&#123;</span><br><span class=\"line\">           key: &apos;drawCircle&apos;,</span><br><span class=\"line\">           value: function drawCircle(ctx) &#123;</span><br><span class=\"line\">               ctx.beginPath();</span><br><span class=\"line\">               //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span><br><span class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">               ctx.closePath();</span><br><span class=\"line\">               ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">               ctx.fill();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;, &#123;</span><br><span class=\"line\">           key: &apos;drawLine&apos;,</span><br><span class=\"line\">           value: function drawLine(ctx, _circle) &#123;</span><br><span class=\"line\">               var dx = this.x - _circle.x;</span><br><span class=\"line\">               var dy = this.y - _circle.y;</span><br><span class=\"line\">               var d = Math.sqrt(dx * dx + dy * dy);</span><br><span class=\"line\">               if (d &lt; 150) &#123;</span><br><span class=\"line\">                   ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">                   ctx.moveTo(this.x, this.y); //起始点</span><br><span class=\"line\">                   ctx.lineTo(_circle.x, _circle.y); //终点</span><br><span class=\"line\">                   ctx.closePath();</span><br><span class=\"line\">                   ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</span><br><span class=\"line\">                   ctx.stroke();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;, &#123;</span><br><span class=\"line\">           key: &apos;move&apos;,</span><br><span class=\"line\">           value: function move(w, h) &#123;</span><br><span class=\"line\">               this._mx = this.x &lt; w &amp;&amp; this.x &gt; 0 ? this._mx : -this._mx;</span><br><span class=\"line\">               this._my = this.y &lt; h &amp;&amp; this.y &gt; 0 ? this._my : -this._my;</span><br><span class=\"line\">               this.x += this._mx / 2;</span><br><span class=\"line\">               this.y += this._my / 2;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">       return Circle;</span><br><span class=\"line\">   &#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   var currentCirle = function (_Circle) &#123;</span><br><span class=\"line\">       _inherits(currentCirle, _Circle);</span><br><span class=\"line\"></span><br><span class=\"line\">       function currentCirle(x, y) &#123;</span><br><span class=\"line\">           _classCallCheck(this, currentCirle);</span><br><span class=\"line\"></span><br><span class=\"line\">           return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       _createClass(currentCirle, [&#123;</span><br><span class=\"line\">           key: &apos;drawCircle&apos;,</span><br><span class=\"line\">           value: function drawCircle(ctx) &#123;</span><br><span class=\"line\">               ctx.beginPath();</span><br><span class=\"line\"></span><br><span class=\"line\">               //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span><br><span class=\"line\">               this.r = 8;</span><br><span class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</span><br><span class=\"line\">               ctx.closePath();</span><br><span class=\"line\">               //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</span><br><span class=\"line\">               ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;;</span><br><span class=\"line\">               ctx.fill();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">       return currentCirle;</span><br><span class=\"line\">   &#125;(Circle);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class=\"line\"></span><br><span class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class=\"line\">   var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">   var w = canvas.width = canvas.offsetWidth;</span><br><span class=\"line\">   var h = canvas.height = canvas.offsetHeight;</span><br><span class=\"line\">   var circles = [];</span><br><span class=\"line\">   var current_circle = new currentCirle(0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">   var draw = function draw() &#123;</span><br><span class=\"line\">       ctx.clearRect(0, 0, w, h);</span><br><span class=\"line\">       for (var i = 0; i &lt; circles.length; i++) &#123;</span><br><span class=\"line\">           circles[i].move(w, h);</span><br><span class=\"line\">           circles[i].drawCircle(ctx);</span><br><span class=\"line\">           for (j = i + 1; j &lt; circles.length; j++) &#123;</span><br><span class=\"line\">               circles[i].drawLine(ctx, circles[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if (current_circle.x) &#123;</span><br><span class=\"line\">           current_circle.drawCircle(ctx);</span><br><span class=\"line\">           for (var k = 1; k &lt; circles.length; k++) &#123;</span><br><span class=\"line\">               current_circle.drawLine(ctx, circles[k]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       requestAnimationFrame(draw);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var init = function init(num) &#123;</span><br><span class=\"line\">       for (var i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">           circles.push(new Circle(Math.random() * w, Math.random() * h));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       draw();</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   window.addEventListener(&apos;load&apos;, init(60));</span><br><span class=\"line\">   window.onmousemove = function (e) &#123;</span><br><span class=\"line\">       e = e || window.event;</span><br><span class=\"line\">       current_circle.x = e.clientX;</span><br><span class=\"line\">       current_circle.y = e.clientY;</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   window.onmouseout = function () &#123;</span><br><span class=\"line\">       current_circle.x = null;</span><br><span class=\"line\">       current_circle.y = null;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>2：在主题文件的<code>C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl</code>文件中加上css代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*设置背景*/</span><br><span class=\"line\">.bg_content&#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#canvas&#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height:100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*将头部背景变为透明*/</span><br><span class=\"line\">.header&#123;</span><br><span class=\"line\">  background: transparent ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</span><br><span class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</span><br><span class=\"line\">    &lt;/iframe&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"noopener\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true</span><br><span class=\"line\">  min2read: true</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Show number of visitors to each article.</span><br><span class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  app_id: yourapp_id</span><br><span class=\"line\">  app_key: yourapp_key</span><br></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\" target=\"_blank\" rel=\"noopener\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # Hexo Configuration</span><br><span class=\"line\">## Docs: https://hexo.io/docs/configuration.html</span><br><span class=\"line\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site   站点信息</span><br><span class=\"line\">title: Cherry&apos;s Blog    #站点名字</span><br><span class=\"line\">subtitle: To Be a Batter Me  #副标题</span><br><span class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</span><br><span class=\"line\">author: Cherry   #博主名字</span><br><span class=\"line\">email: 991939332@qq.com #联系邮箱</span><br><span class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: http://yoursite.com</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title/</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads/code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: next</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</span><br><span class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</span><br></pre></td></tr></table></figure>"},{"title":"Hexo 3：【高阶】附件插入音乐、分享、评论、标签页、搜索","date":"2016-09-16T17:01:48.000Z","_content":"![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","source":"_posts/Hexo-insert-music-share-comment-tab-search.md","raw":"---\ntitle: Hexo 3：【高阶】附件插入音乐、分享、评论、标签页、搜索\ndate: 2016-09-17 01:01:48\ntags: [Hexo] \ncategories: [Hexo建站]\n\n---\n![title](http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","slug":"Hexo-insert-music-share-comment-tab-search","published":1,"updated":"2018-02-27T22:51:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjedzqcn000103gd4dqwkv0ca","content":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br><a id=\"more\"></a></p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</span><br></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</span><br><span class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</span><br></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class=\"line\">&lt;section id=&quot;comments&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 多说评论框 start --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- 多说评论框 end --&gt;</span><br><span class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</span><br><span class=\"line\">      (function() &#123;</span><br><span class=\"line\">        var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">        ds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</span><br><span class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">      &#125;)();</span><br><span class=\"line\">      &lt;/script&gt;</span><br><span class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</span><br><span class=\"line\">  &lt;/section&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</span><br></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  #categories: /categories //分类</span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签（添加此行即可）</span><br><span class=\"line\">  about: /about   //关于</span><br><span class=\"line\">  #commonweal: /404.html</span><br></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftype_key:上面红圈中的内容</span><br></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">      path: search.xml</span><br><span class=\"line\">      field: post</span><br></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170810182823396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"title\"><br>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br>","more":"</p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</span><br></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</span><br><span class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</span><br></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class=\"line\">&lt;section id=&quot;comments&quot;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/section&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</span><br><span class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 多说评论框 start --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- 多说评论框 end --&gt;</span><br><span class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</span><br><span class=\"line\">      (function() &#123;</span><br><span class=\"line\">        var ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">        ds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</span><br><span class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">      &#125;)();</span><br><span class=\"line\">      &lt;/script&gt;</span><br><span class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</span><br><span class=\"line\">  &lt;/section&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</span><br></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /      //主页</span><br><span class=\"line\">  #categories: /categories //分类</span><br><span class=\"line\">  archives: /archives   //归档</span><br><span class=\"line\">  tags: /tags   //标签（添加此行即可）</span><br><span class=\"line\">  about: /about   //关于</span><br><span class=\"line\">  #commonweal: /404.html</span><br></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftype_key:上面红圈中的内容</span><br></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">      path: search.xml</span><br><span class=\"line\">      field: post</span><br></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>"},{"_content":"\n# python基础学习之函数\n\n## 1.函数基础\n\n### 1.1什么是函数？为什么要用函数编程？\n  - 什么是函数？ 一个函数就是将一些语句集合在一起的部件，它们能够不止一次地在程序中运行。函数还能够计算出一个返回值， 并能够改变作为函数输入的参数，而这些参数在代码运行时也许每次都不相同。\n  - 为什么要用函数？1.最大程度的重用和最小化代码冗余 2.流程的分解\n### 1.2函数相关的语句和表达式\n\n\n```python\n# Calls def是可执行的代码,一一函数并不存在，直到Python运行了def后才存在。\neg:myfunc(\"spam\",\"eggs\",meat=ham)\n# def创建了一个对象并将其赋值给某一变量名.\ndef adder(a,b=1,*c):\n    # return将一个结果对象发送给调用者\n    return a+b+c[0]\n#lambda创建一个对象但将其作为结果返回\n Funcs = [lambda x: x**2,lambda x: x*3]\n#yield 向调用者发回一个结果对象.但是记住它离开的地方\ndef squares(x):\n    for i in range(x):\n        yield i ** 2\n\"\"\"\nglobal声明了一个模块级的变量并被赋值,在默认情况下.所有在一个函数中被眠\n值的对象，是这个函数的本地变量，并且仅在这个函数运行的过程中存在。为了\n分配一个可以在整个模块中都可以使用的变量;名，函数需要在global语句中将它列\n举出来。通常情况下，变'量名往往需要关注它的作用域(也就是说变量存储的地\n方) ，并且是通过实赋值语句将变景名绑定至作用域的。\n\"\"\"\ndef changer():\n    global x; x = 'new'\n\"\"\"\nnonlocal声明了将要赋值的一个封闭的函数变量。类似的， Python3.0中添加的\nnonlocal语句允许一个函数来赋值一条语泌封闭的def语句的作用域中已有的名\n称。这就允许封闭的函数作为保留状态的一个地方一一当一个函数调用的时候，信\n息被记住了一一而不必使用共享的全局名称。\n\"\"\"\ndef changer():\n    nonlocal x; x = 'new'\n```\n\n\n```python\n# def创建了一个对象并将其赋值给某一变量名.\neg:def adder(a,b=1,*c):\n```\n\n\n```python\n# return将一个结果对象发送给调用者\neg:return a+b+c[0]\n```\n\n### 1.3函数的定义和调用\n\n\n```python\n# def语句是实时执行的:Python函数在程序运行之前并不需要全部定义。更确切地讲. def在运行时才进行评估，而在def之中的代码在函数惆用后才会评估。\ndef times(x,y):\n    return x * y\ntimes(3,5)\n```\n\n\n\n\n    15\n\n\n\n### 1.4python中的多态\n- 就像我们看到的那样， ti mes 函数中表达式沪y的意义完全取决干x和y的对象类型，同样的函数，在一个实例下执行的是乘泣， 在另一个实例下执行的却是赋值。Py thon将对某一对象在某种语法的合理性交囱对象自身来判断。实际上， \"*\"在针对正被处理的对象进行了随机应变。这种依赖类型的行为称为多态\n\n\n```python\n# eg1\ndef times(x,y):\n    return x * y\ntimes(3,5)\ntimes(\"ab\",3)\n```\n\n\n\n\n    'ababab'\n\n\n\n\n```python\n# eg2\ndef intersect(seq1,seq2):\n    res = []\n    for x in seq1:\n        if x in  seq2:\n            res.append(x)\n    return res\ns1 = \"SDAF\"\ns2 = \"SDBOF\"\nprint intersect(s1,s2)\n#intersect是多态的,它可以支持多种类型,只要其支持扩展对象接口\nx = intersect([1,2,3],(1,4))\nprint x\n#intersect函数相当慢(它执行嵌套循环) ，并不是真正的数学交集(结果中可能有重复的元素)，这个函数可以用一个单独的列表解析表达式来替代\ns1 = \"SDAF\"\ns2 = \"SABOF\"\nprint [x for x in s1 if x in s2]\ns1 = [1,2,3]\ns2 = (1,4)\nprint [x for x in s1 if x in s2]\n```\n\n    ['S', 'D', 'F']\n    [1]\n    ['S', 'A', 'F']\n    [1]\n    \n\n#### 本地变量，以上例中的intersect函数为例：\n- res,seq1,seq2,x都是intersect函数的本地变量\n- 所有的本地变量都会在函数调用时出现，并在函数退出时悄失\n\n### 1.5 q&a(个人理解)\n- q:什么时候Python将会创建函数?在函数定义内部的语句什么时候运行? \n- a:python函数是实时执行的，只有当Python运行到并执行def语句的时候才会创建函数，并且函数内部的代码也只会在调用函数的时候进行评估。\n- q:当一个函数没有return语句时，它将返还什么? \n- a:函数的几个要素包括：函数名，参数，处理过程，返回结果（return），其中处理过程不必要，但其他三个是一定有的（但是return不一定要写，在定义函数时可以不写return，函数会默认返回None。\n- q:检查传入函数的对象类型有什么错误? \n- a:~~如果传入的参数数量不对或者传入的参数数量是对的，但参数类型不能被函数所接受，都会报TypeError的错误~~ \n- a：检查传入函数的对象类型，实质上就是破坏函数的灵活性，把函数限制在特定的类型上。没有这类检查时，函数可能处理所有的对象类型: 任何支持函数所预期的接口的对象都能用。\n","source":"_posts/python_def.md","raw":"\n# python基础学习之函数\n\n## 1.函数基础\n\n### 1.1什么是函数？为什么要用函数编程？\n  - 什么是函数？ 一个函数就是将一些语句集合在一起的部件，它们能够不止一次地在程序中运行。函数还能够计算出一个返回值， 并能够改变作为函数输入的参数，而这些参数在代码运行时也许每次都不相同。\n  - 为什么要用函数？1.最大程度的重用和最小化代码冗余 2.流程的分解\n### 1.2函数相关的语句和表达式\n\n\n```python\n# Calls def是可执行的代码,一一函数并不存在，直到Python运行了def后才存在。\neg:myfunc(\"spam\",\"eggs\",meat=ham)\n# def创建了一个对象并将其赋值给某一变量名.\ndef adder(a,b=1,*c):\n    # return将一个结果对象发送给调用者\n    return a+b+c[0]\n#lambda创建一个对象但将其作为结果返回\n Funcs = [lambda x: x**2,lambda x: x*3]\n#yield 向调用者发回一个结果对象.但是记住它离开的地方\ndef squares(x):\n    for i in range(x):\n        yield i ** 2\n\"\"\"\nglobal声明了一个模块级的变量并被赋值,在默认情况下.所有在一个函数中被眠\n值的对象，是这个函数的本地变量，并且仅在这个函数运行的过程中存在。为了\n分配一个可以在整个模块中都可以使用的变量;名，函数需要在global语句中将它列\n举出来。通常情况下，变'量名往往需要关注它的作用域(也就是说变量存储的地\n方) ，并且是通过实赋值语句将变景名绑定至作用域的。\n\"\"\"\ndef changer():\n    global x; x = 'new'\n\"\"\"\nnonlocal声明了将要赋值的一个封闭的函数变量。类似的， Python3.0中添加的\nnonlocal语句允许一个函数来赋值一条语泌封闭的def语句的作用域中已有的名\n称。这就允许封闭的函数作为保留状态的一个地方一一当一个函数调用的时候，信\n息被记住了一一而不必使用共享的全局名称。\n\"\"\"\ndef changer():\n    nonlocal x; x = 'new'\n```\n\n\n```python\n# def创建了一个对象并将其赋值给某一变量名.\neg:def adder(a,b=1,*c):\n```\n\n\n```python\n# return将一个结果对象发送给调用者\neg:return a+b+c[0]\n```\n\n### 1.3函数的定义和调用\n\n\n```python\n# def语句是实时执行的:Python函数在程序运行之前并不需要全部定义。更确切地讲. def在运行时才进行评估，而在def之中的代码在函数惆用后才会评估。\ndef times(x,y):\n    return x * y\ntimes(3,5)\n```\n\n\n\n\n    15\n\n\n\n### 1.4python中的多态\n- 就像我们看到的那样， ti mes 函数中表达式沪y的意义完全取决干x和y的对象类型，同样的函数，在一个实例下执行的是乘泣， 在另一个实例下执行的却是赋值。Py thon将对某一对象在某种语法的合理性交囱对象自身来判断。实际上， \"*\"在针对正被处理的对象进行了随机应变。这种依赖类型的行为称为多态\n\n\n```python\n# eg1\ndef times(x,y):\n    return x * y\ntimes(3,5)\ntimes(\"ab\",3)\n```\n\n\n\n\n    'ababab'\n\n\n\n\n```python\n# eg2\ndef intersect(seq1,seq2):\n    res = []\n    for x in seq1:\n        if x in  seq2:\n            res.append(x)\n    return res\ns1 = \"SDAF\"\ns2 = \"SDBOF\"\nprint intersect(s1,s2)\n#intersect是多态的,它可以支持多种类型,只要其支持扩展对象接口\nx = intersect([1,2,3],(1,4))\nprint x\n#intersect函数相当慢(它执行嵌套循环) ，并不是真正的数学交集(结果中可能有重复的元素)，这个函数可以用一个单独的列表解析表达式来替代\ns1 = \"SDAF\"\ns2 = \"SABOF\"\nprint [x for x in s1 if x in s2]\ns1 = [1,2,3]\ns2 = (1,4)\nprint [x for x in s1 if x in s2]\n```\n\n    ['S', 'D', 'F']\n    [1]\n    ['S', 'A', 'F']\n    [1]\n    \n\n#### 本地变量，以上例中的intersect函数为例：\n- res,seq1,seq2,x都是intersect函数的本地变量\n- 所有的本地变量都会在函数调用时出现，并在函数退出时悄失\n\n### 1.5 q&a(个人理解)\n- q:什么时候Python将会创建函数?在函数定义内部的语句什么时候运行? \n- a:python函数是实时执行的，只有当Python运行到并执行def语句的时候才会创建函数，并且函数内部的代码也只会在调用函数的时候进行评估。\n- q:当一个函数没有return语句时，它将返还什么? \n- a:函数的几个要素包括：函数名，参数，处理过程，返回结果（return），其中处理过程不必要，但其他三个是一定有的（但是return不一定要写，在定义函数时可以不写return，函数会默认返回None。\n- q:检查传入函数的对象类型有什么错误? \n- a:~~如果传入的参数数量不对或者传入的参数数量是对的，但参数类型不能被函数所接受，都会报TypeError的错误~~ \n- a：检查传入函数的对象类型，实质上就是破坏函数的灵活性，把函数限制在特定的类型上。没有这类检查时，函数可能处理所有的对象类型: 任何支持函数所预期的接口的对象都能用。\n","slug":"python_def","published":1,"date":"2018-03-30T09:02:04.098Z","updated":"2018-03-30T09:02:04.212Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfdq03ir00005cd4t3dcd197","content":"<h1 id=\"python基础学习之函数\"><a href=\"#python基础学习之函数\" class=\"headerlink\" title=\"python基础学习之函数\"></a>python基础学习之函数</h1><h2 id=\"1-函数基础\"><a href=\"#1-函数基础\" class=\"headerlink\" title=\"1.函数基础\"></a>1.函数基础</h2><h3 id=\"1-1什么是函数？为什么要用函数编程？\"><a href=\"#1-1什么是函数？为什么要用函数编程？\" class=\"headerlink\" title=\"1.1什么是函数？为什么要用函数编程？\"></a>1.1什么是函数？为什么要用函数编程？</h3><ul>\n<li>什么是函数？ 一个函数就是将一些语句集合在一起的部件，它们能够不止一次地在程序中运行。函数还能够计算出一个返回值， 并能够改变作为函数输入的参数，而这些参数在代码运行时也许每次都不相同。</li>\n<li>为什么要用函数？1.最大程度的重用和最小化代码冗余 2.流程的分解<h3 id=\"1-2函数相关的语句和表达式\"><a href=\"#1-2函数相关的语句和表达式\" class=\"headerlink\" title=\"1.2函数相关的语句和表达式\"></a>1.2函数相关的语句和表达式</h3></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Calls def是可执行的代码,一一函数并不存在，直到Python运行了def后才存在。</span></span><br><span class=\"line\">eg:myfunc(<span class=\"string\">\"spam\"</span>,<span class=\"string\">\"eggs\"</span>,meat=ham)</span><br><span class=\"line\"><span class=\"comment\"># def创建了一个对象并将其赋值给某一变量名.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(a,b=<span class=\"number\">1</span>,*c)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># return将一个结果对象发送给调用者</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b+c[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\">#lambda创建一个对象但将其作为结果返回</span></span><br><span class=\"line\"> Funcs = [<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>,<span class=\"keyword\">lambda</span> x: x*<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">#yield 向调用者发回一个结果对象.但是记住它离开的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squares</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(x):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">global声明了一个模块级的变量并被赋值,在默认情况下.所有在一个函数中被眠</span></span><br><span class=\"line\"><span class=\"string\">值的对象，是这个函数的本地变量，并且仅在这个函数运行的过程中存在。为了</span></span><br><span class=\"line\"><span class=\"string\">分配一个可以在整个模块中都可以使用的变量;名，函数需要在global语句中将它列</span></span><br><span class=\"line\"><span class=\"string\">举出来。通常情况下，变'量名往往需要关注它的作用域(也就是说变量存储的地</span></span><br><span class=\"line\"><span class=\"string\">方) ，并且是通过实赋值语句将变景名绑定至作用域的。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> x; x = <span class=\"string\">'new'</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">nonlocal声明了将要赋值的一个封闭的函数变量。类似的， Python3.0中添加的</span></span><br><span class=\"line\"><span class=\"string\">nonlocal语句允许一个函数来赋值一条语泌封闭的def语句的作用域中已有的名</span></span><br><span class=\"line\"><span class=\"string\">称。这就允许封闭的函数作为保留状态的一个地方一一当一个函数调用的时候，信</span></span><br><span class=\"line\"><span class=\"string\">息被记住了一一而不必使用共享的全局名称。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">nonlocal</span> x; x = <span class=\"string\">'new'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def创建了一个对象并将其赋值给某一变量名.</span></span><br><span class=\"line\">eg:<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(a,b=<span class=\"number\">1</span>,*c)</span>:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># return将一个结果对象发送给调用者</span></span><br><span class=\"line\">eg:<span class=\"keyword\">return</span> a+b+c[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3函数的定义和调用\"><a href=\"#1-3函数的定义和调用\" class=\"headerlink\" title=\"1.3函数的定义和调用\"></a>1.3函数的定义和调用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def语句是实时执行的:Python函数在程序运行之前并不需要全部定义。更确切地讲. def在运行时才进行评估，而在def之中的代码在函数惆用后才会评估。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">times</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\">times(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>15\n</code></pre><h3 id=\"1-4python中的多态\"><a href=\"#1-4python中的多态\" class=\"headerlink\" title=\"1.4python中的多态\"></a>1.4python中的多态</h3><ul>\n<li>就像我们看到的那样， ti mes 函数中表达式沪y的意义完全取决干x和y的对象类型，同样的函数，在一个实例下执行的是乘泣， 在另一个实例下执行的却是赋值。Py thon将对某一对象在某种语法的合理性交囱对象自身来判断。实际上， “*”在针对正被处理的对象进行了随机应变。这种依赖类型的行为称为多态</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eg1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">times</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\">times(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">times(<span class=\"string\">\"ab\"</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;ababab&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eg2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intersect</span><span class=\"params\">(seq1,seq2)</span>:</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> seq1:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span>  seq2:</span><br><span class=\"line\">            res.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">s1 = <span class=\"string\">\"SDAF\"</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"SDBOF\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> intersect(s1,s2)</span><br><span class=\"line\"><span class=\"comment\">#intersect是多态的,它可以支持多种类型,只要其支持扩展对象接口</span></span><br><span class=\"line\">x = intersect([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(<span class=\"number\">1</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"keyword\">print</span> x</span><br><span class=\"line\"><span class=\"comment\">#intersect函数相当慢(它执行嵌套循环) ，并不是真正的数学交集(结果中可能有重复的元素)，这个函数可以用一个单独的列表解析表达式来替代</span></span><br><span class=\"line\">s1 = <span class=\"string\">\"SDAF\"</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"SABOF\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s1 <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> s2]</span><br><span class=\"line\">s1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">s2 = (<span class=\"number\">1</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s1 <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> s2]</span><br></pre></td></tr></table></figure>\n<pre><code>[&apos;S&apos;, &apos;D&apos;, &apos;F&apos;]\n[1]\n[&apos;S&apos;, &apos;A&apos;, &apos;F&apos;]\n[1]\n</code></pre><h4 id=\"本地变量，以上例中的intersect函数为例：\"><a href=\"#本地变量，以上例中的intersect函数为例：\" class=\"headerlink\" title=\"本地变量，以上例中的intersect函数为例：\"></a>本地变量，以上例中的intersect函数为例：</h4><ul>\n<li>res,seq1,seq2,x都是intersect函数的本地变量</li>\n<li>所有的本地变量都会在函数调用时出现，并在函数退出时悄失</li>\n</ul>\n<h3 id=\"1-5-q-amp-a-个人理解\"><a href=\"#1-5-q-amp-a-个人理解\" class=\"headerlink\" title=\"1.5 q&amp;a(个人理解)\"></a>1.5 q&amp;a(个人理解)</h3><ul>\n<li>q:什么时候Python将会创建函数?在函数定义内部的语句什么时候运行? </li>\n<li>a:python函数是实时执行的，只有当Python运行到并执行def语句的时候才会创建函数，并且函数内部的代码也只会在调用函数的时候进行评估。</li>\n<li>q:当一个函数没有return语句时，它将返还什么? </li>\n<li>a:函数的几个要素包括：函数名，参数，处理过程，返回结果（return），其中处理过程不必要，但其他三个是一定有的（但是return不一定要写，在定义函数时可以不写return，函数会默认返回None。</li>\n<li>q:检查传入函数的对象类型有什么错误? </li>\n<li>a:<del>如果传入的参数数量不对或者传入的参数数量是对的，但参数类型不能被函数所接受，都会报TypeError的错误</del> </li>\n<li>a：检查传入函数的对象类型，实质上就是破坏函数的灵活性，把函数限制在特定的类型上。没有这类检查时，函数可能处理所有的对象类型: 任何支持函数所预期的接口的对象都能用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python基础学习之函数\"><a href=\"#python基础学习之函数\" class=\"headerlink\" title=\"python基础学习之函数\"></a>python基础学习之函数</h1><h2 id=\"1-函数基础\"><a href=\"#1-函数基础\" class=\"headerlink\" title=\"1.函数基础\"></a>1.函数基础</h2><h3 id=\"1-1什么是函数？为什么要用函数编程？\"><a href=\"#1-1什么是函数？为什么要用函数编程？\" class=\"headerlink\" title=\"1.1什么是函数？为什么要用函数编程？\"></a>1.1什么是函数？为什么要用函数编程？</h3><ul>\n<li>什么是函数？ 一个函数就是将一些语句集合在一起的部件，它们能够不止一次地在程序中运行。函数还能够计算出一个返回值， 并能够改变作为函数输入的参数，而这些参数在代码运行时也许每次都不相同。</li>\n<li>为什么要用函数？1.最大程度的重用和最小化代码冗余 2.流程的分解<h3 id=\"1-2函数相关的语句和表达式\"><a href=\"#1-2函数相关的语句和表达式\" class=\"headerlink\" title=\"1.2函数相关的语句和表达式\"></a>1.2函数相关的语句和表达式</h3></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Calls def是可执行的代码,一一函数并不存在，直到Python运行了def后才存在。</span></span><br><span class=\"line\">eg:myfunc(<span class=\"string\">\"spam\"</span>,<span class=\"string\">\"eggs\"</span>,meat=ham)</span><br><span class=\"line\"><span class=\"comment\"># def创建了一个对象并将其赋值给某一变量名.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(a,b=<span class=\"number\">1</span>,*c)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># return将一个结果对象发送给调用者</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b+c[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\">#lambda创建一个对象但将其作为结果返回</span></span><br><span class=\"line\"> Funcs = [<span class=\"keyword\">lambda</span> x: x**<span class=\"number\">2</span>,<span class=\"keyword\">lambda</span> x: x*<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">#yield 向调用者发回一个结果对象.但是记住它离开的地方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squares</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(x):</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">global声明了一个模块级的变量并被赋值,在默认情况下.所有在一个函数中被眠</span></span><br><span class=\"line\"><span class=\"string\">值的对象，是这个函数的本地变量，并且仅在这个函数运行的过程中存在。为了</span></span><br><span class=\"line\"><span class=\"string\">分配一个可以在整个模块中都可以使用的变量;名，函数需要在global语句中将它列</span></span><br><span class=\"line\"><span class=\"string\">举出来。通常情况下，变'量名往往需要关注它的作用域(也就是说变量存储的地</span></span><br><span class=\"line\"><span class=\"string\">方) ，并且是通过实赋值语句将变景名绑定至作用域的。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> x; x = <span class=\"string\">'new'</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">nonlocal声明了将要赋值的一个封闭的函数变量。类似的， Python3.0中添加的</span></span><br><span class=\"line\"><span class=\"string\">nonlocal语句允许一个函数来赋值一条语泌封闭的def语句的作用域中已有的名</span></span><br><span class=\"line\"><span class=\"string\">称。这就允许封闭的函数作为保留状态的一个地方一一当一个函数调用的时候，信</span></span><br><span class=\"line\"><span class=\"string\">息被记住了一一而不必使用共享的全局名称。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">nonlocal</span> x; x = <span class=\"string\">'new'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def创建了一个对象并将其赋值给某一变量名.</span></span><br><span class=\"line\">eg:<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adder</span><span class=\"params\">(a,b=<span class=\"number\">1</span>,*c)</span>:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># return将一个结果对象发送给调用者</span></span><br><span class=\"line\">eg:<span class=\"keyword\">return</span> a+b+c[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3函数的定义和调用\"><a href=\"#1-3函数的定义和调用\" class=\"headerlink\" title=\"1.3函数的定义和调用\"></a>1.3函数的定义和调用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def语句是实时执行的:Python函数在程序运行之前并不需要全部定义。更确切地讲. def在运行时才进行评估，而在def之中的代码在函数惆用后才会评估。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">times</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\">times(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>15\n</code></pre><h3 id=\"1-4python中的多态\"><a href=\"#1-4python中的多态\" class=\"headerlink\" title=\"1.4python中的多态\"></a>1.4python中的多态</h3><ul>\n<li>就像我们看到的那样， ti mes 函数中表达式沪y的意义完全取决干x和y的对象类型，同样的函数，在一个实例下执行的是乘泣， 在另一个实例下执行的却是赋值。Py thon将对某一对象在某种语法的合理性交囱对象自身来判断。实际上， “*”在针对正被处理的对象进行了随机应变。这种依赖类型的行为称为多态</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eg1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">times</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\">times(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">times(<span class=\"string\">\"ab\"</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;ababab&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># eg2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">intersect</span><span class=\"params\">(seq1,seq2)</span>:</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> seq1:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span>  seq2:</span><br><span class=\"line\">            res.append(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">s1 = <span class=\"string\">\"SDAF\"</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"SDBOF\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> intersect(s1,s2)</span><br><span class=\"line\"><span class=\"comment\">#intersect是多态的,它可以支持多种类型,只要其支持扩展对象接口</span></span><br><span class=\"line\">x = intersect([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],(<span class=\"number\">1</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"keyword\">print</span> x</span><br><span class=\"line\"><span class=\"comment\">#intersect函数相当慢(它执行嵌套循环) ，并不是真正的数学交集(结果中可能有重复的元素)，这个函数可以用一个单独的列表解析表达式来替代</span></span><br><span class=\"line\">s1 = <span class=\"string\">\"SDAF\"</span></span><br><span class=\"line\">s2 = <span class=\"string\">\"SABOF\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s1 <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> s2]</span><br><span class=\"line\">s1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">s2 = (<span class=\"number\">1</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s1 <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> s2]</span><br></pre></td></tr></table></figure>\n<pre><code>[&apos;S&apos;, &apos;D&apos;, &apos;F&apos;]\n[1]\n[&apos;S&apos;, &apos;A&apos;, &apos;F&apos;]\n[1]\n</code></pre><h4 id=\"本地变量，以上例中的intersect函数为例：\"><a href=\"#本地变量，以上例中的intersect函数为例：\" class=\"headerlink\" title=\"本地变量，以上例中的intersect函数为例：\"></a>本地变量，以上例中的intersect函数为例：</h4><ul>\n<li>res,seq1,seq2,x都是intersect函数的本地变量</li>\n<li>所有的本地变量都会在函数调用时出现，并在函数退出时悄失</li>\n</ul>\n<h3 id=\"1-5-q-amp-a-个人理解\"><a href=\"#1-5-q-amp-a-个人理解\" class=\"headerlink\" title=\"1.5 q&amp;a(个人理解)\"></a>1.5 q&amp;a(个人理解)</h3><ul>\n<li>q:什么时候Python将会创建函数?在函数定义内部的语句什么时候运行? </li>\n<li>a:python函数是实时执行的，只有当Python运行到并执行def语句的时候才会创建函数，并且函数内部的代码也只会在调用函数的时候进行评估。</li>\n<li>q:当一个函数没有return语句时，它将返还什么? </li>\n<li>a:函数的几个要素包括：函数名，参数，处理过程，返回结果（return），其中处理过程不必要，但其他三个是一定有的（但是return不一定要写，在定义函数时可以不写return，函数会默认返回None。</li>\n<li>q:检查传入函数的对象类型有什么错误? </li>\n<li>a:<del>如果传入的参数数量不对或者传入的参数数量是对的，但参数类型不能被函数所接受，都会报TypeError的错误</del> </li>\n<li>a：检查传入函数的对象类型，实质上就是破坏函数的灵活性，把函数限制在特定的类型上。没有这类检查时，函数可能处理所有的对象类型: 任何支持函数所预期的接口的对象都能用。</li>\n</ul>\n"},{"title":"python基础之模块儿导入和重载","date":"2017-07-14T02:15:00.000Z","_content":"# python基础学习之模块儿导入和重载\n\n## 1.import 的工作流程\n1. 找到模块儿文件\n2. 编译成位码（需要时）\n3. 执行模块儿的代码来创建起所定义的对象\n\n\n```python\n#创建一个名为myfile.py的python模块儿文件，其内容为：\ntitle = \"Hello Word\"\n```\n\n\n```python\n#在新的python文件中首次加载我们刚才创建的myfile模块儿\nimport myfile\n```\n\n    Hello Word\n    \n\n\n```python\n# 默认情况下，只是在每次会话的第一次运行，在第一次导入之后，其他的导入都不会再工作\nimport myfile #再次导入就没有执行\n```\n\n\n```python\n# 使用reload函数可以再次执行\nfrom imp import reload\nreload(myfile)\n```\n\n    Hello Word\n    \n\n\n\n\n    <module 'myfile' from 'myfile.pyc'>\n\n\n\n## 2.获取模块儿的属性\n\n\n```python\n#创建一个名为myfile.py的python模块儿文件，其内容为：\na = 'first'\nb = 'second'\nc = 'third'\nprint a,b,c\n```\n\n\n```python\n#在新的python文件中获取myfile中的变量\nfrom imp import reload\nreload(myfile)\nprint myfile.a,myfile.b\n```\n\n    first second third\n    first second\n    \n\n\n```python\n#或者使用from,import导入变量\nfrom myfile import a,b\na,b\n```\n\n\n\n\n    ('first', 'second')\n\n\n\n\n```python\n#内置的dir函数可以用来获取模块儿内部可用的变量名的列表\ndir(myfile) #以双下划线开头并结尾的变量名;这些通常都是由Python预定义的内置变量名,那些通过代码赋值而定义的变量( a,b,c ) 在dir结果的最后显示。\n```\n\n\n\n\n    ['__builtins__',\n     '__doc__',\n     '__file__',\n     '__name__',\n     '__package__',\n     'a',\n     'b',\n     'c',\n     'title']\n\n\n","source":"_posts/python_import&reload.md","raw":"---\ntitle: python基础之模块儿导入和重载\ndate: 2017-07-14 10:15:00\ntags: [python,import,reload] \ncategories: [python基础]\n---\n# python基础学习之模块儿导入和重载\n\n## 1.import 的工作流程\n1. 找到模块儿文件\n2. 编译成位码（需要时）\n3. 执行模块儿的代码来创建起所定义的对象\n\n\n```python\n#创建一个名为myfile.py的python模块儿文件，其内容为：\ntitle = \"Hello Word\"\n```\n\n\n```python\n#在新的python文件中首次加载我们刚才创建的myfile模块儿\nimport myfile\n```\n\n    Hello Word\n    \n\n\n```python\n# 默认情况下，只是在每次会话的第一次运行，在第一次导入之后，其他的导入都不会再工作\nimport myfile #再次导入就没有执行\n```\n\n\n```python\n# 使用reload函数可以再次执行\nfrom imp import reload\nreload(myfile)\n```\n\n    Hello Word\n    \n\n\n\n\n    <module 'myfile' from 'myfile.pyc'>\n\n\n\n## 2.获取模块儿的属性\n\n\n```python\n#创建一个名为myfile.py的python模块儿文件，其内容为：\na = 'first'\nb = 'second'\nc = 'third'\nprint a,b,c\n```\n\n\n```python\n#在新的python文件中获取myfile中的变量\nfrom imp import reload\nreload(myfile)\nprint myfile.a,myfile.b\n```\n\n    first second third\n    first second\n    \n\n\n```python\n#或者使用from,import导入变量\nfrom myfile import a,b\na,b\n```\n\n\n\n\n    ('first', 'second')\n\n\n\n\n```python\n#内置的dir函数可以用来获取模块儿内部可用的变量名的列表\ndir(myfile) #以双下划线开头并结尾的变量名;这些通常都是由Python预定义的内置变量名,那些通过代码赋值而定义的变量( a,b,c ) 在dir结果的最后显示。\n```\n\n\n\n\n    ['__builtins__',\n     '__doc__',\n     '__file__',\n     '__name__',\n     '__package__',\n     'a',\n     'b',\n     'c',\n     'title']\n\n\n","slug":"python_import&reload","published":1,"updated":"2018-03-31T15:32:25.960Z","_id":"cjfdq03j200015cd4xsd20xfj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"python基础学习之模块儿导入和重载\"><a href=\"#python基础学习之模块儿导入和重载\" class=\"headerlink\" title=\"python基础学习之模块儿导入和重载\"></a>python基础学习之模块儿导入和重载</h1><h2 id=\"1-import-的工作流程\"><a href=\"#1-import-的工作流程\" class=\"headerlink\" title=\"1.import 的工作流程\"></a>1.import 的工作流程</h2><ol>\n<li>找到模块儿文件</li>\n<li>编译成位码（需要时）</li>\n<li>执行模块儿的代码来创建起所定义的对象</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个名为myfile.py的python模块儿文件，其内容为：</span></span><br><span class=\"line\">title = <span class=\"string\">\"Hello Word\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在新的python文件中首次加载我们刚才创建的myfile模块儿</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myfile</span><br></pre></td></tr></table></figure>\n<pre><code>Hello Word\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下，只是在每次会话的第一次运行，在第一次导入之后，其他的导入都不会再工作</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myfile <span class=\"comment\">#再次导入就没有执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用reload函数可以再次执行</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\">reload(myfile)</span><br></pre></td></tr></table></figure>\n<pre><code>Hello Word\n\n\n\n\n\n&lt;module &apos;myfile&apos; from &apos;myfile.pyc&apos;&gt;\n</code></pre><h2 id=\"2-获取模块儿的属性\"><a href=\"#2-获取模块儿的属性\" class=\"headerlink\" title=\"2.获取模块儿的属性\"></a>2.获取模块儿的属性</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个名为myfile.py的python模块儿文件，其内容为：</span></span><br><span class=\"line\">a = <span class=\"string\">'first'</span></span><br><span class=\"line\">b = <span class=\"string\">'second'</span></span><br><span class=\"line\">c = <span class=\"string\">'third'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> a,b,c</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在新的python文件中获取myfile中的变量</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\">reload(myfile)</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfile.a,myfile.b</span><br></pre></td></tr></table></figure>\n<pre><code>first second third\nfirst second\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或者使用from,import导入变量</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> myfile <span class=\"keyword\">import</span> a,b</span><br><span class=\"line\">a,b</span><br></pre></td></tr></table></figure>\n<pre><code>(&apos;first&apos;, &apos;second&apos;)\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#内置的dir函数可以用来获取模块儿内部可用的变量名的列表</span></span><br><span class=\"line\">dir(myfile) <span class=\"comment\">#以双下划线开头并结尾的变量名;这些通常都是由Python预定义的内置变量名,那些通过代码赋值而定义的变量( a,b,c ) 在dir结果的最后显示。</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&apos;__builtins__&apos;,\n &apos;__doc__&apos;,\n &apos;__file__&apos;,\n &apos;__name__&apos;,\n &apos;__package__&apos;,\n &apos;a&apos;,\n &apos;b&apos;,\n &apos;c&apos;,\n &apos;title&apos;]\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python基础学习之模块儿导入和重载\"><a href=\"#python基础学习之模块儿导入和重载\" class=\"headerlink\" title=\"python基础学习之模块儿导入和重载\"></a>python基础学习之模块儿导入和重载</h1><h2 id=\"1-import-的工作流程\"><a href=\"#1-import-的工作流程\" class=\"headerlink\" title=\"1.import 的工作流程\"></a>1.import 的工作流程</h2><ol>\n<li>找到模块儿文件</li>\n<li>编译成位码（需要时）</li>\n<li>执行模块儿的代码来创建起所定义的对象</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个名为myfile.py的python模块儿文件，其内容为：</span></span><br><span class=\"line\">title = <span class=\"string\">\"Hello Word\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在新的python文件中首次加载我们刚才创建的myfile模块儿</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myfile</span><br></pre></td></tr></table></figure>\n<pre><code>Hello Word\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下，只是在每次会话的第一次运行，在第一次导入之后，其他的导入都不会再工作</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myfile <span class=\"comment\">#再次导入就没有执行</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用reload函数可以再次执行</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\">reload(myfile)</span><br></pre></td></tr></table></figure>\n<pre><code>Hello Word\n\n\n\n\n\n&lt;module &apos;myfile&apos; from &apos;myfile.pyc&apos;&gt;\n</code></pre><h2 id=\"2-获取模块儿的属性\"><a href=\"#2-获取模块儿的属性\" class=\"headerlink\" title=\"2.获取模块儿的属性\"></a>2.获取模块儿的属性</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个名为myfile.py的python模块儿文件，其内容为：</span></span><br><span class=\"line\">a = <span class=\"string\">'first'</span></span><br><span class=\"line\">b = <span class=\"string\">'second'</span></span><br><span class=\"line\">c = <span class=\"string\">'third'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> a,b,c</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在新的python文件中获取myfile中的变量</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> imp <span class=\"keyword\">import</span> reload</span><br><span class=\"line\">reload(myfile)</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfile.a,myfile.b</span><br></pre></td></tr></table></figure>\n<pre><code>first second third\nfirst second\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或者使用from,import导入变量</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> myfile <span class=\"keyword\">import</span> a,b</span><br><span class=\"line\">a,b</span><br></pre></td></tr></table></figure>\n<pre><code>(&apos;first&apos;, &apos;second&apos;)\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#内置的dir函数可以用来获取模块儿内部可用的变量名的列表</span></span><br><span class=\"line\">dir(myfile) <span class=\"comment\">#以双下划线开头并结尾的变量名;这些通常都是由Python预定义的内置变量名,那些通过代码赋值而定义的变量( a,b,c ) 在dir结果的最后显示。</span></span><br></pre></td></tr></table></figure>\n<pre><code>[&apos;__builtins__&apos;,\n &apos;__doc__&apos;,\n &apos;__file__&apos;,\n &apos;__name__&apos;,\n &apos;__package__&apos;,\n &apos;a&apos;,\n &apos;b&apos;,\n &apos;c&apos;,\n &apos;title&apos;]\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjedzqceg00073gd4jt714t6i","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqcev000c3gd4tznguebo"},{"post_id":"cjedzqcdh00003gd4uxcoyu2k","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqcex000f3gd46lm1vbti"},{"post_id":"cjedzqcek00083gd4nkv3t0n2","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqcez000g3gd4qchdpgb4"},{"post_id":"cjedzqcdx00023gd42he54pky","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqcf2000i3gd4xuhxet85"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqco300133gd4v7qa6p7y"},{"post_id":"cjedzqcn000103gd4dqwkv0ca","category_id":"cjedzqce300043gd43zxoi20c","_id":"cjedzqco300143gd4tan60h02"},{"post_id":"cjfdq03j200015cd4xsd20xfj","category_id":"cjffjcl570000qzjqks48zjtx","_id":"cjffjcl5a0003qzjqckudn7f2"}],"PostTag":[{"post_id":"cjedzqcdh00003gd4uxcoyu2k","tag_id":"cjedzqce600053gd4mmtvbabs","_id":"cjedzqcer000b3gd45qiz82ws"},{"post_id":"cjedzqcdx00023gd42he54pky","tag_id":"cjedzqce600053gd4mmtvbabs","_id":"cjedzqcex000e3gd47cbv8ebo"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcew000d3gd4x6kvu1ph","_id":"cjedzqcf7000o3gd4773ynnmh"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcf2000h3gd447d9jkeb","_id":"cjedzqcf7000p3gd4buzl0wrq"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcf5000j3gd4n4ua5fbc","_id":"cjedzqcf8000r3gd4fd04p1sp"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcf6000k3gd4sfrqdjxf","_id":"cjedzqcfa000s3gd41o2yhv5z"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcf6000l3gd46131g62r","_id":"cjedzqcfb000u3gd4ki996wh7"},{"post_id":"cjedzqceg00073gd4jt714t6i","tag_id":"cjedzqcf6000m3gd4tt213839","_id":"cjedzqcfb000v3gd4667t9h1a"},{"post_id":"cjedzqcek00083gd4nkv3t0n2","tag_id":"cjedzqcew000d3gd4x6kvu1ph","_id":"cjedzqcfe000w3gd4t9gb9rob"},{"post_id":"cjedzqcek00083gd4nkv3t0n2","tag_id":"cjedzqcf8000q3gd4s0qqi3gw","_id":"cjedzqcff000x3gd4tmc6rbux"},{"post_id":"cjedzqcek00083gd4nkv3t0n2","tag_id":"cjedzqcfa000t3gd4lque7pbe","_id":"cjedzqcff000y3gd49m611p6x"},{"post_id":"cjedzqcn000103gd4dqwkv0ca","tag_id":"cjedzqce600053gd4mmtvbabs","_id":"cjedzqco200123gd4ar23qnyk"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","tag_id":"cjedzqce600053gd4mmtvbabs","_id":"cjedzqco600183gd40mk51tlp"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","tag_id":"cjedzqcn300113gd4t6gz3m2u","_id":"cjedzqco700193gd4kocdwl19"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","tag_id":"cjedzqco300153gd418c7myf9","_id":"cjedzqco7001a3gd4zktjf3a7"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","tag_id":"cjedzqco500163gd4vcmmvbky","_id":"cjedzqco8001b3gd4ifwftvff"},{"post_id":"cjedzqcmx000z3gd48jmdpu8e","tag_id":"cjedzqco500173gd40h4tyxsx","_id":"cjedzqco9001c3gd4oychassm"},{"post_id":"cjfdq03j200015cd4xsd20xfj","tag_id":"cjffjcl580001qzjqlqw7u6vj","_id":"cjffjcl5b0005qzjq3z5p5rgs"},{"post_id":"cjfdq03j200015cd4xsd20xfj","tag_id":"cjffjcl590002qzjqc5cnd4vy","_id":"cjffjcl5b0006qzjq2tdvm6ph"},{"post_id":"cjfdq03j200015cd4xsd20xfj","tag_id":"cjffjcl5a0004qzjqd1kuhlr0","_id":"cjffjcl5b0007qzjqyy9javac"}],"Tag":[{"name":"Hexo","_id":"cjedzqce600053gd4mmtvbabs"},{"name":"hexo高阶教程","_id":"cjedzqcew000d3gd4x6kvu1ph"},{"name":"hexo+gulp","_id":"cjedzqcf2000h3gd447d9jkeb"},{"name":"hexo+七牛","_id":"cjedzqcf5000j3gd4n4ua5fbc"},{"name":"hexo百度收录","_id":"cjedzqcf6000k3gd4sfrqdjxf"},{"name":"hexo百度统计","_id":"cjedzqcf6000l3gd46131g62r"},{"name":"hexo seo","_id":"cjedzqcf6000m3gd4tt213839"},{"name":"hexo原理","_id":"cjedzqcf8000q3gd4s0qqi3gw"},{"name":"github的pages服务","_id":"cjedzqcfa000t3gd4lque7pbe"},{"name":"NexT主题","_id":"cjedzqcn300113gd4t6gz3m2u"},{"name":"网易云音乐","_id":"cjedzqco300153gd418c7myf9"},{"name":"动态背景","_id":"cjedzqco500163gd4vcmmvbky"},{"name":"统计功能","_id":"cjedzqco500173gd40h4tyxsx"},{"name":"python","_id":"cjffjcl580001qzjqlqw7u6vj"},{"name":"import","_id":"cjffjcl590002qzjqc5cnd4vy"},{"name":"reload","_id":"cjffjcl5a0004qzjqd1kuhlr0"}]}}